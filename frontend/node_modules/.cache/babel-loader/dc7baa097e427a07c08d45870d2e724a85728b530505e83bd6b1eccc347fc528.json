{"ast":null,"code":"/**\n * Utility functions for handling API errors consistently.\n */\n\n/**\n * Parse API error response into a user-friendly string message\n * @param {Object} error - Axios error object\n * @param {string} defaultMessage - Default error message if parsing fails\n * @returns {string} - Parsed error message\n */\nexport const parseErrorMessage = (error, defaultMessage = 'An error occurred. Please try again.') => {\n  var _error$response;\n  if (!((_error$response = error.response) !== null && _error$response !== void 0 && _error$response.data)) {\n    return defaultMessage;\n  }\n  const errorData = error.response.data;\n\n  // Handle FastAPI validation errors (array of error objects)\n  if (Array.isArray(errorData.detail)) {\n    return errorData.detail.map(err => {\n      if (typeof err === 'object' && err.msg) {\n        return err.msg;\n      }\n      if (typeof err === 'string') {\n        return err;\n      }\n      return 'Validation error';\n    }).join(', ');\n  }\n\n  // Handle single string error messages\n  if (typeof errorData.detail === 'string') {\n    return errorData.detail;\n  }\n  if (typeof errorData.message === 'string') {\n    return errorData.message;\n  }\n  if (typeof errorData === 'string') {\n    return errorData;\n  }\n  return defaultMessage;\n};\n\n/**\n * Handle common HTTP status codes with appropriate messages\n * @param {Object} error - Axios error object\n * @returns {string} - Status-specific error message\n */\nexport const getStatusErrorMessage = error => {\n  var _error$response2;\n  const status = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status;\n  switch (status) {\n    case 400:\n      return parseErrorMessage(error, 'Invalid request. Please check your input.');\n    case 401:\n      return 'Authentication failed. Please check your credentials.';\n    case 403:\n      return 'You do not have permission to perform this action.';\n    case 404:\n      return 'The requested resource was not found.';\n    case 409:\n      return parseErrorMessage(error, 'A conflict occurred. This resource may already exist.');\n    case 422:\n      return parseErrorMessage(error, 'Invalid data provided. Please check your input.');\n    case 429:\n      return 'Too many requests. Please try again later.';\n    case 500:\n      return 'Server error. Please try again later.';\n    case 503:\n      return 'Service unavailable. Please try again later.';\n    default:\n      return parseErrorMessage(error);\n  }\n};","map":{"version":3,"names":["parseErrorMessage","error","defaultMessage","_error$response","response","data","errorData","Array","isArray","detail","map","err","msg","join","message","getStatusErrorMessage","_error$response2","status"],"sources":["/Users/surajj/Desktop/JobPortal/frontend/src/utils/errorHandler.js"],"sourcesContent":["/**\n * Utility functions for handling API errors consistently.\n */\n\n/**\n * Parse API error response into a user-friendly string message\n * @param {Object} error - Axios error object\n * @param {string} defaultMessage - Default error message if parsing fails\n * @returns {string} - Parsed error message\n */\nexport const parseErrorMessage = (error, defaultMessage = 'An error occurred. Please try again.') => {\n  if (!error.response?.data) {\n    return defaultMessage;\n  }\n\n  const errorData = error.response.data;\n\n  // Handle FastAPI validation errors (array of error objects)\n  if (Array.isArray(errorData.detail)) {\n    return errorData.detail\n      .map(err => {\n        if (typeof err === 'object' && err.msg) {\n          return err.msg;\n        }\n        if (typeof err === 'string') {\n          return err;\n        }\n        return 'Validation error';\n      })\n      .join(', ');\n  }\n\n  // Handle single string error messages\n  if (typeof errorData.detail === 'string') {\n    return errorData.detail;\n  }\n\n  if (typeof errorData.message === 'string') {\n    return errorData.message;\n  }\n\n  if (typeof errorData === 'string') {\n    return errorData;\n  }\n\n  return defaultMessage;\n};\n\n/**\n * Handle common HTTP status codes with appropriate messages\n * @param {Object} error - Axios error object\n * @returns {string} - Status-specific error message\n */\nexport const getStatusErrorMessage = (error) => {\n  const status = error.response?.status;\n\n  switch (status) {\n    case 400:\n      return parseErrorMessage(error, 'Invalid request. Please check your input.');\n    case 401:\n      return 'Authentication failed. Please check your credentials.';\n    case 403:\n      return 'You do not have permission to perform this action.';\n    case 404:\n      return 'The requested resource was not found.';\n    case 409:\n      return parseErrorMessage(error, 'A conflict occurred. This resource may already exist.');\n    case 422:\n      return parseErrorMessage(error, 'Invalid data provided. Please check your input.');\n    case 429:\n      return 'Too many requests. Please try again later.';\n    case 500:\n      return 'Server error. Please try again later.';\n    case 503:\n      return 'Service unavailable. Please try again later.';\n    default:\n      return parseErrorMessage(error);\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,cAAc,GAAG,sCAAsC,KAAK;EAAA,IAAAC,eAAA;EACnG,IAAI,GAAAA,eAAA,GAACF,KAAK,CAACG,QAAQ,cAAAD,eAAA,eAAdA,eAAA,CAAgBE,IAAI,GAAE;IACzB,OAAOH,cAAc;EACvB;EAEA,MAAMI,SAAS,GAAGL,KAAK,CAACG,QAAQ,CAACC,IAAI;;EAErC;EACA,IAAIE,KAAK,CAACC,OAAO,CAACF,SAAS,CAACG,MAAM,CAAC,EAAE;IACnC,OAAOH,SAAS,CAACG,MAAM,CACpBC,GAAG,CAACC,GAAG,IAAI;MACV,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,GAAG,EAAE;QACtC,OAAOD,GAAG,CAACC,GAAG;MAChB;MACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;QAC3B,OAAOA,GAAG;MACZ;MACA,OAAO,kBAAkB;IAC3B,CAAC,CAAC,CACDE,IAAI,CAAC,IAAI,CAAC;EACf;;EAEA;EACA,IAAI,OAAOP,SAAS,CAACG,MAAM,KAAK,QAAQ,EAAE;IACxC,OAAOH,SAAS,CAACG,MAAM;EACzB;EAEA,IAAI,OAAOH,SAAS,CAACQ,OAAO,KAAK,QAAQ,EAAE;IACzC,OAAOR,SAAS,CAACQ,OAAO;EAC1B;EAEA,IAAI,OAAOR,SAAS,KAAK,QAAQ,EAAE;IACjC,OAAOA,SAAS;EAClB;EAEA,OAAOJ,cAAc;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,qBAAqB,GAAId,KAAK,IAAK;EAAA,IAAAe,gBAAA;EAC9C,MAAMC,MAAM,IAAAD,gBAAA,GAAGf,KAAK,CAACG,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM;EAErC,QAAQA,MAAM;IACZ,KAAK,GAAG;MACN,OAAOjB,iBAAiB,CAACC,KAAK,EAAE,2CAA2C,CAAC;IAC9E,KAAK,GAAG;MACN,OAAO,uDAAuD;IAChE,KAAK,GAAG;MACN,OAAO,oDAAoD;IAC7D,KAAK,GAAG;MACN,OAAO,uCAAuC;IAChD,KAAK,GAAG;MACN,OAAOD,iBAAiB,CAACC,KAAK,EAAE,uDAAuD,CAAC;IAC1F,KAAK,GAAG;MACN,OAAOD,iBAAiB,CAACC,KAAK,EAAE,iDAAiD,CAAC;IACpF,KAAK,GAAG;MACN,OAAO,4CAA4C;IACrD,KAAK,GAAG;MACN,OAAO,uCAAuC;IAChD,KAAK,GAAG;MACN,OAAO,8CAA8C;IACvD;MACE,OAAOD,iBAAiB,CAACC,KAAK,CAAC;EACnC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}