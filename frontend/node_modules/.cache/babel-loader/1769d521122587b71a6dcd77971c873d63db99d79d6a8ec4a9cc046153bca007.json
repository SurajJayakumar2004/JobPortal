{"ast":null,"code":"/**\n * Utility functions for handling API errors consistently.\n *//**\n * Parse API error response into a user-friendly string message\n * @param {Object} error - Axios error object\n * @param {string} defaultMessage - Default error message if parsing fails\n * @returns {string} - Parsed error message\n */export const parseErrorMessage=function(error){let defaultMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'An error occurred. Please try again.';// Handle network errors\nif(!error.response){if(error.code==='ECONNABORTED'){return'Request timed out. Please check your connection and try again.';}if(error.code==='ERR_NETWORK'){return'Network error. Please check your internet connection.';}if(error.message==='Network Error'){return'Unable to connect to server. Please try again later.';}return'Connection error. Please check your internet connection.';}const errorData=error.response.data;// Handle FastAPI validation errors (array of error objects)\nif(Array.isArray(errorData.detail)){return errorData.detail.map(err=>{if(typeof err==='object'&&err.msg){return err.msg;}if(typeof err==='string'){return err;}return'Validation error';}).join(', ');}// Handle single string error messages\nif(typeof errorData.detail==='string'){return errorData.detail;}if(typeof errorData.message==='string'){return errorData.message;}if(typeof errorData==='string'){return errorData;}return defaultMessage;};/**\n * Handle common HTTP status codes with appropriate messages\n * @param {Object} error - Axios error object\n * @returns {string} - Status-specific error message\n */export const getStatusErrorMessage=error=>{var _error$response;// Handle network errors first\nif(!error.response){return parseErrorMessage(error);}const status=(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status;switch(status){case 400:return parseErrorMessage(error,'Invalid request. Please check your input.');case 401:return'Authentication failed. Please log in again.';case 403:return'You do not have permission to perform this action.';case 404:return'The requested resource was not found.';case 409:return parseErrorMessage(error,'A conflict occurred. This resource may already exist.');case 422:return parseErrorMessage(error,'Invalid data provided. Please check your input.');case 429:return'Too many requests. Please try again later.';case 500:return'Server error. Please try again later.';case 502:return'Bad gateway. The server is temporarily unavailable.';case 503:return'Service unavailable. Please try again later.';case 504:return'Gateway timeout. The request took too long to process.';default:return parseErrorMessage(error);}};/**\n * Enhanced error logger for debugging and monitoring\n * @param {Object} error - Error object\n * @param {string} context - Context where error occurred\n * @param {Object} additionalData - Additional data to log\n */export const logError=function(error){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Unknown';let additionalData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const errorDetails={context,timestamp:new Date().toISOString(),message:error.message,stack:error.stack,response:error.response?{status:error.response.status,statusText:error.response.statusText,data:error.response.data}:null,request:error.config?{url:error.config.url,method:error.config.method,data:error.config.data}:null,...additionalData};console.group(`ðŸš¨ Error in ${context}`);console.error('Error details:',errorDetails);console.groupEnd();// In production, you might want to send this to an error monitoring service\n// like Sentry, LogRocket, or your own logging endpoint\n};/**\n * Retry mechanism for failed requests\n * @param {Function} apiCall - The API call function to retry\n * @param {number} maxRetries - Maximum number of retries\n * @param {number} delay - Delay between retries in milliseconds\n * @returns {Promise} - Promise that resolves with the successful response\n */export const retryApiCall=async function(apiCall){let maxRetries=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;let delay=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1000;let lastError;for(let attempt=1;attempt<=maxRetries;attempt++){try{return await apiCall();}catch(error){var _error$response2,_error$response3,_error$response4;lastError=error;// Don't retry on client errors (4xx) except 408 (timeout)\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)>=400&&((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)<500&&((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)!==408){throw error;}if(attempt<maxRetries){console.warn(`API call failed (attempt ${attempt}/${maxRetries}). Retrying in ${delay}ms...`);await new Promise(resolve=>setTimeout(resolve,delay));delay*=2;// Exponential backoff\n}}}throw lastError;};/**\n * Check if error is recoverable (user can retry)\n * @param {Object} error - Error object\n * @returns {boolean} - Whether the error is recoverable\n */export const isRecoverableError=error=>{if(!error.response){return true;// Network errors are usually recoverable\n}const status=error.response.status;// Server errors and timeouts are recoverable\nif(status>=500||status===408||status===429){return true;}return false;};/**\n * Create a standardized error boundary component helper\n * @param {string} componentName - Name of the component for error tracking\n * @returns {Object} - Error boundary state and methods\n */export const createErrorBoundary=componentName=>{return{getDerivedStateFromError:error=>({hasError:true,error:error,errorInfo:{componentName,timestamp:new Date().toISOString()}}),componentDidCatch:(error,errorInfo)=>{logError(error,`Error Boundary: ${componentName}`,{errorInfo,componentStack:errorInfo.componentStack});}};};","map":{"version":3,"names":["parseErrorMessage","error","defaultMessage","arguments","length","undefined","response","code","message","errorData","data","Array","isArray","detail","map","err","msg","join","getStatusErrorMessage","_error$response","status","logError","context","additionalData","errorDetails","timestamp","Date","toISOString","stack","statusText","request","config","url","method","console","group","groupEnd","retryApiCall","apiCall","maxRetries","delay","lastError","attempt","_error$response2","_error$response3","_error$response4","warn","Promise","resolve","setTimeout","isRecoverableError","createErrorBoundary","componentName","getDerivedStateFromError","hasError","errorInfo","componentDidCatch","componentStack"],"sources":["/Users/surajj/Desktop/JobPortal1/frontend/src/utils/errorHandler.js"],"sourcesContent":["/**\n * Utility functions for handling API errors consistently.\n */\n\n/**\n * Parse API error response into a user-friendly string message\n * @param {Object} error - Axios error object\n * @param {string} defaultMessage - Default error message if parsing fails\n * @returns {string} - Parsed error message\n */\nexport const parseErrorMessage = (error, defaultMessage = 'An error occurred. Please try again.') => {\n  // Handle network errors\n  if (!error.response) {\n    if (error.code === 'ECONNABORTED') {\n      return 'Request timed out. Please check your connection and try again.';\n    }\n    if (error.code === 'ERR_NETWORK') {\n      return 'Network error. Please check your internet connection.';\n    }\n    if (error.message === 'Network Error') {\n      return 'Unable to connect to server. Please try again later.';\n    }\n    return 'Connection error. Please check your internet connection.';\n  }\n\n  const errorData = error.response.data;\n\n  // Handle FastAPI validation errors (array of error objects)\n  if (Array.isArray(errorData.detail)) {\n    return errorData.detail\n      .map(err => {\n        if (typeof err === 'object' && err.msg) {\n          return err.msg;\n        }\n        if (typeof err === 'string') {\n          return err;\n        }\n        return 'Validation error';\n      })\n      .join(', ');\n  }\n\n  // Handle single string error messages\n  if (typeof errorData.detail === 'string') {\n    return errorData.detail;\n  }\n\n  if (typeof errorData.message === 'string') {\n    return errorData.message;\n  }\n\n  if (typeof errorData === 'string') {\n    return errorData;\n  }\n\n  return defaultMessage;\n};\n\n/**\n * Handle common HTTP status codes with appropriate messages\n * @param {Object} error - Axios error object\n * @returns {string} - Status-specific error message\n */\nexport const getStatusErrorMessage = (error) => {\n  // Handle network errors first\n  if (!error.response) {\n    return parseErrorMessage(error);\n  }\n\n  const status = error.response?.status;\n\n  switch (status) {\n    case 400:\n      return parseErrorMessage(error, 'Invalid request. Please check your input.');\n    case 401:\n      return 'Authentication failed. Please log in again.';\n    case 403:\n      return 'You do not have permission to perform this action.';\n    case 404:\n      return 'The requested resource was not found.';\n    case 409:\n      return parseErrorMessage(error, 'A conflict occurred. This resource may already exist.');\n    case 422:\n      return parseErrorMessage(error, 'Invalid data provided. Please check your input.');\n    case 429:\n      return 'Too many requests. Please try again later.';\n    case 500:\n      return 'Server error. Please try again later.';\n    case 502:\n      return 'Bad gateway. The server is temporarily unavailable.';\n    case 503:\n      return 'Service unavailable. Please try again later.';\n    case 504:\n      return 'Gateway timeout. The request took too long to process.';\n    default:\n      return parseErrorMessage(error);\n  }\n};\n\n/**\n * Enhanced error logger for debugging and monitoring\n * @param {Object} error - Error object\n * @param {string} context - Context where error occurred\n * @param {Object} additionalData - Additional data to log\n */\nexport const logError = (error, context = 'Unknown', additionalData = {}) => {\n  const errorDetails = {\n    context,\n    timestamp: new Date().toISOString(),\n    message: error.message,\n    stack: error.stack,\n    response: error.response ? {\n      status: error.response.status,\n      statusText: error.response.statusText,\n      data: error.response.data\n    } : null,\n    request: error.config ? {\n      url: error.config.url,\n      method: error.config.method,\n      data: error.config.data\n    } : null,\n    ...additionalData\n  };\n\n  console.group(`ðŸš¨ Error in ${context}`);\n  console.error('Error details:', errorDetails);\n  console.groupEnd();\n\n  // In production, you might want to send this to an error monitoring service\n  // like Sentry, LogRocket, or your own logging endpoint\n};\n\n/**\n * Retry mechanism for failed requests\n * @param {Function} apiCall - The API call function to retry\n * @param {number} maxRetries - Maximum number of retries\n * @param {number} delay - Delay between retries in milliseconds\n * @returns {Promise} - Promise that resolves with the successful response\n */\nexport const retryApiCall = async (apiCall, maxRetries = 3, delay = 1000) => {\n  let lastError;\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await apiCall();\n    } catch (error) {\n      lastError = error;\n      \n      // Don't retry on client errors (4xx) except 408 (timeout)\n      if (error.response?.status >= 400 && error.response?.status < 500 && error.response?.status !== 408) {\n        throw error;\n      }\n\n      if (attempt < maxRetries) {\n        console.warn(`API call failed (attempt ${attempt}/${maxRetries}). Retrying in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay *= 2; // Exponential backoff\n      }\n    }\n  }\n\n  throw lastError;\n};\n\n/**\n * Check if error is recoverable (user can retry)\n * @param {Object} error - Error object\n * @returns {boolean} - Whether the error is recoverable\n */\nexport const isRecoverableError = (error) => {\n  if (!error.response) {\n    return true; // Network errors are usually recoverable\n  }\n\n  const status = error.response.status;\n  \n  // Server errors and timeouts are recoverable\n  if (status >= 500 || status === 408 || status === 429) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Create a standardized error boundary component helper\n * @param {string} componentName - Name of the component for error tracking\n * @returns {Object} - Error boundary state and methods\n */\nexport const createErrorBoundary = (componentName) => {\n  return {\n    getDerivedStateFromError: (error) => ({\n      hasError: true,\n      error: error,\n      errorInfo: {\n        componentName,\n        timestamp: new Date().toISOString()\n      }\n    }),\n    \n    componentDidCatch: (error, errorInfo) => {\n      logError(error, `Error Boundary: ${componentName}`, {\n        errorInfo,\n        componentStack: errorInfo.componentStack\n      });\n    }\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}