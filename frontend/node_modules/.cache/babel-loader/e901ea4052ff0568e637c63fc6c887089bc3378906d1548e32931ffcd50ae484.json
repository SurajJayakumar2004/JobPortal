{"ast":null,"code":"/**\n * AI Matching API Service\n * Handles communication with the Python backend for AI-powered job matching and candidate screening\n */import axios from'axios';// Backend API base URL (adjust based on your backend configuration)\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';class AIMatchingAPI{constructor(){this.api=axios.create({baseURL:`${API_BASE_URL}/api`,headers:{'Content-Type':'application/json'}});// Add request interceptor to include auth token\nthis.api.interceptors.request.use(config=>{const token=localStorage.getItem('auth_token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// Add response interceptor for error handling\nthis.api.interceptors.response.use(response=>response,error=>{var _error$response;console.error('API Error:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);return Promise.reject(error);});}/**\n   * Get AI-ranked candidates for a specific job\n   * @param {string} jobId - The job ID to get candidates for\n   * @returns {Promise<Object>} AI-ranked candidates with match scores\n   */async getCandidatesForJob(jobId){try{console.log(`Fetching AI-ranked candidates for job: ${jobId}`);const response=await this.api.get(`/jobs/${jobId}/candidates`);return response.data;}catch(error){console.error('Error fetching candidates for job:',error);// Return mock data for development\nreturn this.getMockCandidatesForJob(jobId);}}/**\n   * Get job recommendations for a candidate\n   * @param {string} candidateId - The candidate ID\n   * @returns {Promise<Object>} AI-recommended jobs for the candidate\n   */async getJobRecommendationsForCandidate(candidateId){try{const response=await this.api.get(`/candidates/${candidateId}/job-recommendations`);return response.data;}catch(error){console.error('Error fetching job recommendations:',error);return this.getMockJobRecommendations();}}/**\n   * Analyze skill gaps for a candidate against job requirements\n   * @param {string} candidateId - The candidate ID\n   * @param {string} jobId - The job ID to analyze against\n   * @returns {Promise<Object>} Skill gap analysis\n   */async analyzeSkillGap(candidateId,jobId){try{const response=await this.api.post(`/analysis/skill-gap`,{candidate_id:candidateId,job_id:jobId});return response.data;}catch(error){console.error('Error analyzing skill gap:',error);return this.getMockSkillGapAnalysis();}}/**\n   * Upload and parse resume for AI analysis\n   * @param {File} resumeFile - The resume file to upload\n   * @returns {Promise<Object>} Parsed resume data with AI feedback\n   */async uploadAndParseResume(resumeFile){try{const formData=new FormData();formData.append('resume_file',resumeFile);const response=await this.api.post('/resumes/upload-and-parse',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){console.error('Error uploading and parsing resume:',error);throw error;}}/**\n   * Get AI insights for a job posting\n   * @param {string} jobId - The job ID\n   * @returns {Promise<Object>} AI insights and analytics for the job\n   */async getJobInsights(jobId){try{const response=await this.api.get(`/jobs/${jobId}/ai-insights`);return response.data;}catch(error){console.error('Error fetching job insights:',error);return this.getMockJobInsights(jobId);}}/**\n   * Get overall matching statistics for an employer\n   * @returns {Promise<Object>} Matching statistics and insights\n   */async getEmployerMatchingStats(){try{const response=await this.api.get('/employers/matching-stats');return response.data;}catch(error){console.error('Error fetching employer matching stats:',error);return this.getMockEmployerStats();}}/**\n   * Batch process multiple resumes for a job\n   * @param {string} jobId - The job ID\n   * @param {Array<string>} candidateIds - Array of candidate IDs to process\n   * @returns {Promise<Object>} Batch processing results\n   */async batchProcessCandidates(jobId,candidateIds){try{const response=await this.api.post('/jobs/batch-process-candidates',{job_id:jobId,candidate_ids:candidateIds});return response.data;}catch(error){console.error('Error batch processing candidates:',error);throw error;}}// Mock data methods for development/fallback\ngetMockCandidatesForJob(jobId){return{success:true,data:{job_id:jobId,job_title:\"Senior Software Engineer\",total_candidates:12,average_match_score:78.5,candidates:[{user_id:\"candidate_1\",user_name:\"Alex Johnson\",user_email:\"alex.johnson@email.com\",resume_id:\"resume_1\",match_score:92.5,matching_skills:[\"Python\",\"React\",\"AWS\",\"Machine Learning\",\"PostgreSQL\"],missing_skills:[\"Kubernetes\",\"GraphQL\"],experience_level:\"senior\",location:\"San Francisco, CA\",years_experience:6,summary:\"Experienced full-stack developer with strong ML background\",key_achievements:[\"Led development of ML recommendation system\",\"Reduced API response time by 40%\",\"Mentored 5 junior developers\"]},{user_id:\"candidate_2\",user_name:\"Sarah Chen\",user_email:\"sarah.chen@email.com\",resume_id:\"resume_2\",match_score:87.3,matching_skills:[\"Python\",\"Django\",\"AWS\",\"Docker\",\"Redis\"],missing_skills:[\"React\",\"Machine Learning\",\"Kubernetes\"],experience_level:\"mid\",location:\"Seattle, WA\",years_experience:4,summary:\"Backend specialist with cloud infrastructure expertise\",key_achievements:[\"Architected microservices platform\",\"Improved system reliability to 99.9%\",\"Led AWS migration project\"]},{user_id:\"candidate_3\",user_name:\"Michael Rodriguez\",user_email:\"michael.rodriguez@email.com\",resume_id:\"resume_3\",match_score:82.1,matching_skills:[\"JavaScript\",\"React\",\"Node.js\",\"MongoDB\"],missing_skills:[\"Python\",\"AWS\",\"Machine Learning\",\"PostgreSQL\"],experience_level:\"mid\",location:\"Austin, TX\",years_experience:3,summary:\"Frontend-focused developer with full-stack capabilities\",key_achievements:[\"Built responsive web applications\",\"Optimized frontend performance by 60%\",\"Implemented modern UI/UX designs\"]},{user_id:\"candidate_4\",user_name:\"Emily Park\",user_email:\"emily.park@email.com\",resume_id:\"resume_4\",match_score:79.8,matching_skills:[\"Python\",\"Machine Learning\",\"TensorFlow\",\"SQL\"],missing_skills:[\"React\",\"AWS\",\"Docker\",\"Kubernetes\"],experience_level:\"entry\",location:\"New York, NY\",years_experience:2,summary:\"Data science background transitioning to software engineering\",key_achievements:[\"Developed predictive models\",\"Published ML research paper\",\"Built data visualization dashboards\"]}]}};}getMockJobRecommendations(){return{success:true,data:{total_recommendations:8,recommendations:[{job:{_id:\"job_1\",title:\"Machine Learning Engineer\",company_name:\"TechCorp\",location:\"San Francisco, CA\",salary_range:\"$130,000 - $180,000\"},match_score:94.2,matching_skills:[\"Python\",\"TensorFlow\",\"AWS\",\"Docker\"]},{job:{_id:\"job_2\",title:\"Senior Backend Developer\",company_name:\"StartupXYZ\",location:\"Remote\",salary_range:\"$120,000 - $160,000\"},match_score:88.7,matching_skills:[\"Python\",\"PostgreSQL\",\"Redis\",\"API Development\"]}]}};}getMockSkillGapAnalysis(){return{success:true,data:{skill_coverage:73.2,gap_score:26.8,critical_gaps:2,matching_skills_count:8,missing_skills_count:3,matching_skills:[\"Python\",\"React\",\"SQL\",\"Git\",\"Agile\"],missing_skills:[\"Kubernetes\",\"GraphQL\",\"Microservices\"],recommendations:[\"Focus on learning Kubernetes for container orchestration\",\"Consider GraphQL for modern API development\",\"Gain experience with microservices architecture\"]}};}getMockJobInsights(jobId){return{success:true,data:{job_id:jobId,application_trends:{total_applications:45,applications_this_week:12,application_rate:\"2.1 per day\",trending_up:true},candidate_quality:{average_match_score:76.3,high_quality_candidates:18,candidates_above_80_percent:12},skill_demand:{most_common_skills:[\"Python\",\"React\",\"SQL\",\"AWS\"],rare_skills:[\"Kubernetes\",\"GraphQL\",\"Rust\"],skill_gap_frequency:{\"Kubernetes\":67,\"Machine Learning\":43,\"GraphQL\":38}},recommendations:[\"Consider making Kubernetes optional to increase candidate pool\",\"High-quality candidates are actively applying\",\"Your salary range is competitive for this market\"]}};}getMockEmployerStats(){return{success:true,data:{total_jobs_posted:8,total_applications:156,average_match_score:74.2,successful_hires:3,time_to_hire:\"18 days\",top_performing_jobs:[{job_id:\"job_1\",title:\"Senior Developer\",applications:23,avg_match_score:82.1},{job_id:\"job_2\",title:\"Product Manager\",applications:31,avg_match_score:79.8}],candidate_source_analysis:{direct_applications:45,ai_recommendations:32,referrals:18,job_boards:61},skill_trends:{most_in_demand:[\"Python\",\"React\",\"AWS\",\"Machine Learning\"],emerging_skills:[\"Rust\",\"GraphQL\",\"Kubernetes\",\"WebAssembly\"],skill_gaps:[\"DevOps\",\"Cloud Architecture\",\"Data Engineering\"]}}};}// ====== AI ANALYSIS ENDPOINTS ======\n/**\n   * Perform skill gap analysis between candidate and job\n   * @param {string} candidateId - ID of the candidate\n   * @param {string} jobId - ID of the job\n   * @returns {Promise<Object>} Skill gap analysis results\n   */async analyzeSkillGap(candidateId,jobId){try{const response=await this.api.post(`/ai/skill-gap?candidate_id=${candidateId}&job_id=${jobId}`);return response.data;}catch(error){console.error('Error analyzing skill gap:',error);// Mock fallback data\nreturn{success:true,message:\"Skill gap analysis completed (demo mode)\",data:{candidate_id:candidateId,job_id:jobId,skill_coverage:76.5,matching_skills:['JavaScript','React','Node.js','Git'],missing_skills:['AWS','Docker','Kubernetes','TypeScript'],critical_gaps:2,recommendations:['Consider learning AWS to better match this role','Docker and containerization skills would be valuable','Strong foundation in web development - highlight these skills'],improvement_areas:['Cloud Computing','DevOps','Modern JavaScript']}};}}/**\n   * Get AI-powered insights about a candidate\n   * @param {string} candidateId - ID of the candidate\n   * @returns {Promise<Object>} Candidate insights and recommendations\n   */async getCandidateInsights(candidateId){try{const response=await this.api.get(`/ai/candidate-insights/${candidateId}`);return response.data;}catch(error){console.error('Error getting candidate insights:',error);// Mock fallback data\nreturn{success:true,message:\"Candidate insights generated (demo mode)\",data:{candidate_id:candidateId,profile_strength:{overall_score:82.5,skills_diversity:15,experience_relevance:78.0,ats_compatibility:85.2},market_fit:{in_demand_skills:['Python','React','JavaScript'],emerging_skills:['Kubernetes','GraphQL'],skill_gaps:['Machine Learning','DevOps','Cloud Architecture']},career_recommendations:['Consider developing cloud computing skills','Your profile shows strong technical foundation','Focus on building a portfolio of projects'],job_match_potential:{best_fit_roles:['Software Developer','Full Stack Engineer'],salary_range_estimate:'$70,000 - $95,000',location_opportunities:['San Francisco','Seattle','Remote']}}};}}/**\n   * Get current job market trends and analytics\n   * @returns {Promise<Object>} Market trends data\n   */async getMarketTrends(){try{const response=await this.api.get('/ai/market-trends');return response.data;}catch(error){console.error('Error getting market trends:',error);// Mock fallback data\nreturn{success:true,message:\"Market trends retrieved (demo mode)\",data:{skill_demand:{most_in_demand:[{skill:\"Python\",demand_score:95,growth:\"+15%\"},{skill:\"JavaScript\",demand_score:92,growth:\"+12%\"},{skill:\"React\",demand_score:88,growth:\"+20%\"},{skill:\"AWS\",demand_score:85,growth:\"+25%\"},{skill:\"Machine Learning\",demand_score:82,growth:\"+30%\"}],emerging_skills:[{skill:\"Rust\",demand_score:45,growth:\"+150%\"},{skill:\"GraphQL\",demand_score:52,growth:\"+80%\"},{skill:\"Kubernetes\",demand_score:68,growth:\"+60%\"}]},job_categories:{highest_demand:[{category:\"Software Engineering\",openings:15420,growth:\"+18%\"},{category:\"Data Science\",openings:8950,growth:\"+35%\"},{category:\"Product Management\",openings:6780,growth:\"+22%\"}]},salary_trends:{software_engineer:{entry_level:\"$75,000 - $95,000\",mid_level:\"$95,000 - $130,000\",senior_level:\"$130,000 - $180,000\",trend:\"+8% YoY\"},data_scientist:{entry_level:\"$85,000 - $110,000\",mid_level:\"$110,000 - $150,000\",senior_level:\"$150,000 - $200,000\",trend:\"+12% YoY\"}},remote_work:{percentage_remote:65,hybrid_percentage:25,on_site_percentage:10,trend:\"Increasing remote opportunities\"},hiring_timeline:{average_time_to_hire:\"21 days\",interview_rounds:\"3-4 rounds\",response_time:\"5-7 days\"}}};}}/**\n   * Get optimization suggestions for a job posting\n   * @param {string} jobId - ID of the job to optimize\n   * @returns {Promise<Object>} Job optimization suggestions\n   */async optimizeJobPosting(jobId){try{const response=await this.api.post(`/ai/optimize-job-posting?job_id=${jobId}`);return response.data;}catch(error){console.error('Error optimizing job posting:',error);// Mock fallback data\nreturn{success:true,message:\"Job optimization analysis completed (demo mode)\",data:{job_id:jobId,current_performance:{applications_received:12,average_match_score:74.2,time_since_posted:\"5 days\"},title_optimization:{current_title:\"Software Developer\",suggestions:[\"Consider adding seniority level for clarity\",\"Include key technology stack in title\",\"Keep title under 60 characters for better visibility\"],optimized_examples:[\"Senior Software Developer - Python/React\",\"Software Developer (Remote) - TechCorp\"]},description_optimization:{readability_score:78,suggestions:[\"Add bullet points for better readability\",\"Include company culture information\",\"Specify remote work options clearly\"]},requirements_optimization:{total_requirements:8,suggestions:[\"Consider marking some skills as 'nice-to-have'\",\"Add years of experience for each technology\",\"Include soft skills requirements\"]},ats_optimization:{ats_score:85,suggestions:[\"Good keyword usage for ATS systems\",\"Consider adding industry-specific terms\"]}}};}}}// Export singleton instance\nconst aiMatchingAPI=new AIMatchingAPI();export default aiMatchingAPI;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AIMatchingAPI","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","console","data","message","getCandidatesForJob","jobId","log","get","getMockCandidatesForJob","getJobRecommendationsForCandidate","candidateId","getMockJobRecommendations","analyzeSkillGap","post","candidate_id","job_id","getMockSkillGapAnalysis","uploadAndParseResume","resumeFile","formData","FormData","append","getJobInsights","getMockJobInsights","getEmployerMatchingStats","getMockEmployerStats","batchProcessCandidates","candidateIds","candidate_ids","success","job_title","total_candidates","average_match_score","candidates","user_id","user_name","user_email","resume_id","match_score","matching_skills","missing_skills","experience_level","location","years_experience","summary","key_achievements","total_recommendations","recommendations","job","_id","title","company_name","salary_range","skill_coverage","gap_score","critical_gaps","matching_skills_count","missing_skills_count","application_trends","total_applications","applications_this_week","application_rate","trending_up","candidate_quality","high_quality_candidates","candidates_above_80_percent","skill_demand","most_common_skills","rare_skills","skill_gap_frequency","total_jobs_posted","successful_hires","time_to_hire","top_performing_jobs","applications","avg_match_score","candidate_source_analysis","direct_applications","ai_recommendations","referrals","job_boards","skill_trends","most_in_demand","emerging_skills","skill_gaps","improvement_areas","getCandidateInsights","profile_strength","overall_score","skills_diversity","experience_relevance","ats_compatibility","market_fit","in_demand_skills","career_recommendations","job_match_potential","best_fit_roles","salary_range_estimate","location_opportunities","getMarketTrends","skill","demand_score","growth","job_categories","highest_demand","category","openings","salary_trends","software_engineer","entry_level","mid_level","senior_level","trend","data_scientist","remote_work","percentage_remote","hybrid_percentage","on_site_percentage","hiring_timeline","average_time_to_hire","interview_rounds","response_time","optimizeJobPosting","current_performance","applications_received","time_since_posted","title_optimization","current_title","suggestions","optimized_examples","description_optimization","readability_score","requirements_optimization","total_requirements","ats_optimization","ats_score","aiMatchingAPI"],"sources":["/Users/surajj/Desktop/JobPortal1/frontend/src/services/aiMatchingAPI.js"],"sourcesContent":["/**\n * AI Matching API Service\n * Handles communication with the Python backend for AI-powered job matching and candidate screening\n */\n\nimport axios from 'axios';\n\n// Backend API base URL (adjust based on your backend configuration)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nclass AIMatchingAPI {\n  constructor() {\n    this.api = axios.create({\n      baseURL: `${API_BASE_URL}/api`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Add request interceptor to include auth token\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Add response interceptor for error handling\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        console.error('API Error:', error.response?.data || error.message);\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   * Get AI-ranked candidates for a specific job\n   * @param {string} jobId - The job ID to get candidates for\n   * @returns {Promise<Object>} AI-ranked candidates with match scores\n   */\n  async getCandidatesForJob(jobId) {\n    try {\n      console.log(`Fetching AI-ranked candidates for job: ${jobId}`);\n      const response = await this.api.get(`/jobs/${jobId}/candidates`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching candidates for job:', error);\n      // Return mock data for development\n      return this.getMockCandidatesForJob(jobId);\n    }\n  }\n\n  /**\n   * Get job recommendations for a candidate\n   * @param {string} candidateId - The candidate ID\n   * @returns {Promise<Object>} AI-recommended jobs for the candidate\n   */\n  async getJobRecommendationsForCandidate(candidateId) {\n    try {\n      const response = await this.api.get(`/candidates/${candidateId}/job-recommendations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job recommendations:', error);\n      return this.getMockJobRecommendations();\n    }\n  }\n\n  /**\n   * Analyze skill gaps for a candidate against job requirements\n   * @param {string} candidateId - The candidate ID\n   * @param {string} jobId - The job ID to analyze against\n   * @returns {Promise<Object>} Skill gap analysis\n   */\n  async analyzeSkillGap(candidateId, jobId) {\n    try {\n      const response = await this.api.post(`/analysis/skill-gap`, {\n        candidate_id: candidateId,\n        job_id: jobId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing skill gap:', error);\n      return this.getMockSkillGapAnalysis();\n    }\n  }\n\n  /**\n   * Upload and parse resume for AI analysis\n   * @param {File} resumeFile - The resume file to upload\n   * @returns {Promise<Object>} Parsed resume data with AI feedback\n   */\n  async uploadAndParseResume(resumeFile) {\n    try {\n      const formData = new FormData();\n      formData.append('resume_file', resumeFile);\n\n      const response = await this.api.post('/resumes/upload-and-parse', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading and parsing resume:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get AI insights for a job posting\n   * @param {string} jobId - The job ID\n   * @returns {Promise<Object>} AI insights and analytics for the job\n   */\n  async getJobInsights(jobId) {\n    try {\n      const response = await this.api.get(`/jobs/${jobId}/ai-insights`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job insights:', error);\n      return this.getMockJobInsights(jobId);\n    }\n  }\n\n  /**\n   * Get overall matching statistics for an employer\n   * @returns {Promise<Object>} Matching statistics and insights\n   */\n  async getEmployerMatchingStats() {\n    try {\n      const response = await this.api.get('/employers/matching-stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employer matching stats:', error);\n      return this.getMockEmployerStats();\n    }\n  }\n\n  /**\n   * Batch process multiple resumes for a job\n   * @param {string} jobId - The job ID\n   * @param {Array<string>} candidateIds - Array of candidate IDs to process\n   * @returns {Promise<Object>} Batch processing results\n   */\n  async batchProcessCandidates(jobId, candidateIds) {\n    try {\n      const response = await this.api.post('/jobs/batch-process-candidates', {\n        job_id: jobId,\n        candidate_ids: candidateIds\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error batch processing candidates:', error);\n      throw error;\n    }\n  }\n\n  // Mock data methods for development/fallback\n  getMockCandidatesForJob(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        job_title: \"Senior Software Engineer\",\n        total_candidates: 12,\n        average_match_score: 78.5,\n        candidates: [\n          {\n            user_id: \"candidate_1\",\n            user_name: \"Alex Johnson\",\n            user_email: \"alex.johnson@email.com\",\n            resume_id: \"resume_1\",\n            match_score: 92.5,\n            matching_skills: [\"Python\", \"React\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n            missing_skills: [\"Kubernetes\", \"GraphQL\"],\n            experience_level: \"senior\",\n            location: \"San Francisco, CA\",\n            years_experience: 6,\n            summary: \"Experienced full-stack developer with strong ML background\",\n            key_achievements: [\n              \"Led development of ML recommendation system\",\n              \"Reduced API response time by 40%\",\n              \"Mentored 5 junior developers\"\n            ]\n          },\n          {\n            user_id: \"candidate_2\",\n            user_name: \"Sarah Chen\",\n            user_email: \"sarah.chen@email.com\",\n            resume_id: \"resume_2\",\n            match_score: 87.3,\n            matching_skills: [\"Python\", \"Django\", \"AWS\", \"Docker\", \"Redis\"],\n            missing_skills: [\"React\", \"Machine Learning\", \"Kubernetes\"],\n            experience_level: \"mid\",\n            location: \"Seattle, WA\",\n            years_experience: 4,\n            summary: \"Backend specialist with cloud infrastructure expertise\",\n            key_achievements: [\n              \"Architected microservices platform\",\n              \"Improved system reliability to 99.9%\",\n              \"Led AWS migration project\"\n            ]\n          },\n          {\n            user_id: \"candidate_3\",\n            user_name: \"Michael Rodriguez\",\n            user_email: \"michael.rodriguez@email.com\",\n            resume_id: \"resume_3\",\n            match_score: 82.1,\n            matching_skills: [\"JavaScript\", \"React\", \"Node.js\", \"MongoDB\"],\n            missing_skills: [\"Python\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n            experience_level: \"mid\",\n            location: \"Austin, TX\",\n            years_experience: 3,\n            summary: \"Frontend-focused developer with full-stack capabilities\",\n            key_achievements: [\n              \"Built responsive web applications\",\n              \"Optimized frontend performance by 60%\",\n              \"Implemented modern UI/UX designs\"\n            ]\n          },\n          {\n            user_id: \"candidate_4\",\n            user_name: \"Emily Park\",\n            user_email: \"emily.park@email.com\",\n            resume_id: \"resume_4\",\n            match_score: 79.8,\n            matching_skills: [\"Python\", \"Machine Learning\", \"TensorFlow\", \"SQL\"],\n            missing_skills: [\"React\", \"AWS\", \"Docker\", \"Kubernetes\"],\n            experience_level: \"entry\",\n            location: \"New York, NY\",\n            years_experience: 2,\n            summary: \"Data science background transitioning to software engineering\",\n            key_achievements: [\n              \"Developed predictive models\",\n              \"Published ML research paper\",\n              \"Built data visualization dashboards\"\n            ]\n          }\n        ]\n      }\n    };\n  }\n\n  getMockJobRecommendations() {\n    return {\n      success: true,\n      data: {\n        total_recommendations: 8,\n        recommendations: [\n          {\n            job: {\n              _id: \"job_1\",\n              title: \"Machine Learning Engineer\",\n              company_name: \"TechCorp\",\n              location: \"San Francisco, CA\",\n              salary_range: \"$130,000 - $180,000\"\n            },\n            match_score: 94.2,\n            matching_skills: [\"Python\", \"TensorFlow\", \"AWS\", \"Docker\"]\n          },\n          {\n            job: {\n              _id: \"job_2\",\n              title: \"Senior Backend Developer\",\n              company_name: \"StartupXYZ\",\n              location: \"Remote\",\n              salary_range: \"$120,000 - $160,000\"\n            },\n            match_score: 88.7,\n            matching_skills: [\"Python\", \"PostgreSQL\", \"Redis\", \"API Development\"]\n          }\n        ]\n      }\n    };\n  }\n\n  getMockSkillGapAnalysis() {\n    return {\n      success: true,\n      data: {\n        skill_coverage: 73.2,\n        gap_score: 26.8,\n        critical_gaps: 2,\n        matching_skills_count: 8,\n        missing_skills_count: 3,\n        matching_skills: [\"Python\", \"React\", \"SQL\", \"Git\", \"Agile\"],\n        missing_skills: [\"Kubernetes\", \"GraphQL\", \"Microservices\"],\n        recommendations: [\n          \"Focus on learning Kubernetes for container orchestration\",\n          \"Consider GraphQL for modern API development\",\n          \"Gain experience with microservices architecture\"\n        ]\n      }\n    };\n  }\n\n  getMockJobInsights(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        application_trends: {\n          total_applications: 45,\n          applications_this_week: 12,\n          application_rate: \"2.1 per day\",\n          trending_up: true\n        },\n        candidate_quality: {\n          average_match_score: 76.3,\n          high_quality_candidates: 18,\n          candidates_above_80_percent: 12\n        },\n        skill_demand: {\n          most_common_skills: [\"Python\", \"React\", \"SQL\", \"AWS\"],\n          rare_skills: [\"Kubernetes\", \"GraphQL\", \"Rust\"],\n          skill_gap_frequency: {\n            \"Kubernetes\": 67,\n            \"Machine Learning\": 43,\n            \"GraphQL\": 38\n          }\n        },\n        recommendations: [\n          \"Consider making Kubernetes optional to increase candidate pool\",\n          \"High-quality candidates are actively applying\",\n          \"Your salary range is competitive for this market\"\n        ]\n      }\n    };\n  }\n\n  getMockEmployerStats() {\n    return {\n      success: true,\n      data: {\n        total_jobs_posted: 8,\n        total_applications: 156,\n        average_match_score: 74.2,\n        successful_hires: 3,\n        time_to_hire: \"18 days\",\n        top_performing_jobs: [\n          {\n            job_id: \"job_1\",\n            title: \"Senior Developer\",\n            applications: 23,\n            avg_match_score: 82.1\n          },\n          {\n            job_id: \"job_2\", \n            title: \"Product Manager\",\n            applications: 31,\n            avg_match_score: 79.8\n          }\n        ],\n        candidate_source_analysis: {\n          direct_applications: 45,\n          ai_recommendations: 32,\n          referrals: 18,\n          job_boards: 61\n        },\n        skill_trends: {\n          most_in_demand: [\"Python\", \"React\", \"AWS\", \"Machine Learning\"],\n          emerging_skills: [\"Rust\", \"GraphQL\", \"Kubernetes\", \"WebAssembly\"],\n          skill_gaps: [\"DevOps\", \"Cloud Architecture\", \"Data Engineering\"]\n        }\n      }\n    };\n  }\n\n  // ====== AI ANALYSIS ENDPOINTS ======\n  \n  /**\n   * Perform skill gap analysis between candidate and job\n   * @param {string} candidateId - ID of the candidate\n   * @param {string} jobId - ID of the job\n   * @returns {Promise<Object>} Skill gap analysis results\n   */\n  async analyzeSkillGap(candidateId, jobId) {\n    try {\n      const response = await this.api.post(`/ai/skill-gap?candidate_id=${candidateId}&job_id=${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing skill gap:', error);\n      \n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Skill gap analysis completed (demo mode)\",\n        data: {\n          candidate_id: candidateId,\n          job_id: jobId,\n          skill_coverage: 76.5,\n          matching_skills: ['JavaScript', 'React', 'Node.js', 'Git'],\n          missing_skills: ['AWS', 'Docker', 'Kubernetes', 'TypeScript'],\n          critical_gaps: 2,\n          recommendations: [\n            'Consider learning AWS to better match this role',\n            'Docker and containerization skills would be valuable',\n            'Strong foundation in web development - highlight these skills'\n          ],\n          improvement_areas: ['Cloud Computing', 'DevOps', 'Modern JavaScript']\n        }\n      };\n    }\n  }\n\n  /**\n   * Get AI-powered insights about a candidate\n   * @param {string} candidateId - ID of the candidate\n   * @returns {Promise<Object>} Candidate insights and recommendations\n   */\n  async getCandidateInsights(candidateId) {\n    try {\n      const response = await this.api.get(`/ai/candidate-insights/${candidateId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting candidate insights:', error);\n      \n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Candidate insights generated (demo mode)\",\n        data: {\n          candidate_id: candidateId,\n          profile_strength: {\n            overall_score: 82.5,\n            skills_diversity: 15,\n            experience_relevance: 78.0,\n            ats_compatibility: 85.2\n          },\n          market_fit: {\n            in_demand_skills: ['Python', 'React', 'JavaScript'],\n            emerging_skills: ['Kubernetes', 'GraphQL'],\n            skill_gaps: ['Machine Learning', 'DevOps', 'Cloud Architecture']\n          },\n          career_recommendations: [\n            'Consider developing cloud computing skills',\n            'Your profile shows strong technical foundation',\n            'Focus on building a portfolio of projects'\n          ],\n          job_match_potential: {\n            best_fit_roles: ['Software Developer', 'Full Stack Engineer'],\n            salary_range_estimate: '$70,000 - $95,000',\n            location_opportunities: ['San Francisco', 'Seattle', 'Remote']\n          }\n        }\n      };\n    }\n  }\n\n  /**\n   * Get current job market trends and analytics\n   * @returns {Promise<Object>} Market trends data\n   */\n  async getMarketTrends() {\n    try {\n      const response = await this.api.get('/ai/market-trends');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting market trends:', error);\n      \n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Market trends retrieved (demo mode)\",\n        data: {\n          skill_demand: {\n            most_in_demand: [\n              { skill: \"Python\", demand_score: 95, growth: \"+15%\" },\n              { skill: \"JavaScript\", demand_score: 92, growth: \"+12%\" },\n              { skill: \"React\", demand_score: 88, growth: \"+20%\" },\n              { skill: \"AWS\", demand_score: 85, growth: \"+25%\" },\n              { skill: \"Machine Learning\", demand_score: 82, growth: \"+30%\" }\n            ],\n            emerging_skills: [\n              { skill: \"Rust\", demand_score: 45, growth: \"+150%\" },\n              { skill: \"GraphQL\", demand_score: 52, growth: \"+80%\" },\n              { skill: \"Kubernetes\", demand_score: 68, growth: \"+60%\" }\n            ]\n          },\n          job_categories: {\n            highest_demand: [\n              { category: \"Software Engineering\", openings: 15420, growth: \"+18%\" },\n              { category: \"Data Science\", openings: 8950, growth: \"+35%\" },\n              { category: \"Product Management\", openings: 6780, growth: \"+22%\" }\n            ]\n          },\n          salary_trends: {\n            software_engineer: {\n              entry_level: \"$75,000 - $95,000\",\n              mid_level: \"$95,000 - $130,000\",\n              senior_level: \"$130,000 - $180,000\",\n              trend: \"+8% YoY\"\n            },\n            data_scientist: {\n              entry_level: \"$85,000 - $110,000\",\n              mid_level: \"$110,000 - $150,000\",\n              senior_level: \"$150,000 - $200,000\",\n              trend: \"+12% YoY\"\n            }\n          },\n          remote_work: {\n            percentage_remote: 65,\n            hybrid_percentage: 25,\n            on_site_percentage: 10,\n            trend: \"Increasing remote opportunities\"\n          },\n          hiring_timeline: {\n            average_time_to_hire: \"21 days\",\n            interview_rounds: \"3-4 rounds\",\n            response_time: \"5-7 days\"\n          }\n        }\n      };\n    }\n  }\n\n  /**\n   * Get optimization suggestions for a job posting\n   * @param {string} jobId - ID of the job to optimize\n   * @returns {Promise<Object>} Job optimization suggestions\n   */\n  async optimizeJobPosting(jobId) {\n    try {\n      const response = await this.api.post(`/ai/optimize-job-posting?job_id=${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error optimizing job posting:', error);\n      \n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Job optimization analysis completed (demo mode)\",\n        data: {\n          job_id: jobId,\n          current_performance: {\n            applications_received: 12,\n            average_match_score: 74.2,\n            time_since_posted: \"5 days\"\n          },\n          title_optimization: {\n            current_title: \"Software Developer\",\n            suggestions: [\n              \"Consider adding seniority level for clarity\",\n              \"Include key technology stack in title\",\n              \"Keep title under 60 characters for better visibility\"\n            ],\n            optimized_examples: [\n              \"Senior Software Developer - Python/React\",\n              \"Software Developer (Remote) - TechCorp\"\n            ]\n          },\n          description_optimization: {\n            readability_score: 78,\n            suggestions: [\n              \"Add bullet points for better readability\",\n              \"Include company culture information\",\n              \"Specify remote work options clearly\"\n            ]\n          },\n          requirements_optimization: {\n            total_requirements: 8,\n            suggestions: [\n              \"Consider marking some skills as 'nice-to-have'\",\n              \"Add years of experience for each technology\",\n              \"Include soft skills requirements\"\n            ]\n          },\n          ats_optimization: {\n            ats_score: 85,\n            suggestions: [\n              \"Good keyword usage for ATS systems\",\n              \"Consider adding industry-specific terms\"\n            ]\n          }\n        }\n      };\n    }\n  }\n}\n\n// Export singleton instance\nconst aiMatchingAPI = new AIMatchingAPI();\nexport default aiMatchingAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}