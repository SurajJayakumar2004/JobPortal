{"ast":null,"code":"import{useState,useEffect}from'react';/**\n * Custom hook to track network status and connection quality\n * @returns {Object} Network status information\n */export const useNetworkStatus=()=>{const[isOnline,setIsOnline]=useState(navigator.onLine);const[connectionSpeed,setConnectionSpeed]=useState('unknown');const[isSlowConnection,setIsSlowConnection]=useState(false);useEffect(()=>{const handleOnline=()=>setIsOnline(true);const handleOffline=()=>setIsOnline(false);window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);// Monitor connection speed if supported\nif('connection'in navigator){const connection=navigator.connection;const updateConnectionInfo=()=>{setConnectionSpeed(connection.effectiveType||'unknown');setIsSlowConnection(connection.effectiveType==='slow-2g'||connection.effectiveType==='2g');};updateConnectionInfo();connection.addEventListener('change',updateConnectionInfo);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);connection.removeEventListener('change',updateConnectionInfo);};}return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);return{isOnline,connectionSpeed,isSlowConnection};};/**\n * Custom hook for retrying failed operations\n * @param {Function} operation - The operation to retry\n * @param {number} maxRetries - Maximum number of retries\n * @param {number} delay - Delay between retries\n * @returns {Object} Retry state and methods\n */export const useRetry=function(operation){let maxRetries=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;let delay=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1000;const[isRetrying,setIsRetrying]=useState(false);const[retryCount,setRetryCount]=useState(0);const[lastError,setLastError]=useState(null);const retry=async()=>{if(retryCount>=maxRetries){return Promise.reject(new Error('Maximum retry attempts exceeded'));}setIsRetrying(true);setRetryCount(prev=>prev+1);try{await new Promise(resolve=>setTimeout(resolve,delay*retryCount));const result=await operation();setIsRetrying(false);setRetryCount(0);setLastError(null);return result;}catch(error){setLastError(error);setIsRetrying(false);throw error;}};const reset=()=>{setRetryCount(0);setLastError(null);setIsRetrying(false);};return{retry,reset,isRetrying,retryCount,canRetry:retryCount<maxRetries,lastError};};/**\n * Custom hook for handling loading states with error recovery\n * @param {Function} asyncOperation - The async operation to manage\n * @returns {Object} Loading state and methods\n */export const useAsyncOperation=asyncOperation=>{const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[data,setData]=useState(null);const execute=async function(){try{setLoading(true);setError(null);const result=await asyncOperation(...arguments);setData(result);return result;}catch(err){setError(err);throw err;}finally{setLoading(false);}};const reset=()=>{setLoading(false);setError(null);setData(null);};return{execute,reset,loading,error,data};};","map":{"version":3,"names":["useState","useEffect","useNetworkStatus","isOnline","setIsOnline","navigator","onLine","connectionSpeed","setConnectionSpeed","isSlowConnection","setIsSlowConnection","handleOnline","handleOffline","window","addEventListener","connection","updateConnectionInfo","effectiveType","removeEventListener","useRetry","operation","maxRetries","arguments","length","undefined","delay","isRetrying","setIsRetrying","retryCount","setRetryCount","lastError","setLastError","retry","Promise","reject","Error","prev","resolve","setTimeout","result","error","reset","canRetry","useAsyncOperation","asyncOperation","loading","setLoading","setError","data","setData","execute","err"],"sources":["/Users/surajj/Desktop/JobPortal1/frontend/src/hooks/useNetworkStatus.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * Custom hook to track network status and connection quality\n * @returns {Object} Network status information\n */\nexport const useNetworkStatus = () => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [connectionSpeed, setConnectionSpeed] = useState('unknown');\n  const [isSlowConnection, setIsSlowConnection] = useState(false);\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Monitor connection speed if supported\n    if ('connection' in navigator) {\n      const connection = navigator.connection;\n      \n      const updateConnectionInfo = () => {\n        setConnectionSpeed(connection.effectiveType || 'unknown');\n        setIsSlowConnection(connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g');\n      };\n\n      updateConnectionInfo();\n      connection.addEventListener('change', updateConnectionInfo);\n\n      return () => {\n        window.removeEventListener('online', handleOnline);\n        window.removeEventListener('offline', handleOffline);\n        connection.removeEventListener('change', updateConnectionInfo);\n      };\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return {\n    isOnline,\n    connectionSpeed,\n    isSlowConnection\n  };\n};\n\n/**\n * Custom hook for retrying failed operations\n * @param {Function} operation - The operation to retry\n * @param {number} maxRetries - Maximum number of retries\n * @param {number} delay - Delay between retries\n * @returns {Object} Retry state and methods\n */\nexport const useRetry = (operation, maxRetries = 3, delay = 1000) => {\n  const [isRetrying, setIsRetrying] = useState(false);\n  const [retryCount, setRetryCount] = useState(0);\n  const [lastError, setLastError] = useState(null);\n\n  const retry = async () => {\n    if (retryCount >= maxRetries) {\n      return Promise.reject(new Error('Maximum retry attempts exceeded'));\n    }\n\n    setIsRetrying(true);\n    setRetryCount(prev => prev + 1);\n\n    try {\n      await new Promise(resolve => setTimeout(resolve, delay * retryCount));\n      const result = await operation();\n      setIsRetrying(false);\n      setRetryCount(0);\n      setLastError(null);\n      return result;\n    } catch (error) {\n      setLastError(error);\n      setIsRetrying(false);\n      throw error;\n    }\n  };\n\n  const reset = () => {\n    setRetryCount(0);\n    setLastError(null);\n    setIsRetrying(false);\n  };\n\n  return {\n    retry,\n    reset,\n    isRetrying,\n    retryCount,\n    canRetry: retryCount < maxRetries,\n    lastError\n  };\n};\n\n/**\n * Custom hook for handling loading states with error recovery\n * @param {Function} asyncOperation - The async operation to manage\n * @returns {Object} Loading state and methods\n */\nexport const useAsyncOperation = (asyncOperation) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n\n  const execute = async (...args) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await asyncOperation(...args);\n      setData(result);\n      return result;\n    } catch (err) {\n      setError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const reset = () => {\n    setLoading(false);\n    setError(null);\n    setData(null);\n  };\n\n  return {\n    execute,\n    reset,\n    loading,\n    error,\n    data\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}