{"ast":null,"code":"/**\n * AI Matching API Service\n * Handles communication with the Python backend for AI-powered job matching and candidate screening\n */\n\nimport axios from 'axios';\n\n// Backend API base URL (adjust based on your backend configuration)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nclass AIMatchingAPI {\n  constructor() {\n    this.api = axios.create({\n      baseURL: `${API_BASE_URL}/api`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Add request interceptor to include auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Add response interceptor for error handling\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Get AI-ranked candidates for a specific job\n   * @param {string} jobId - The job ID to get candidates for\n   * @returns {Promise<Object>} AI-ranked candidates with match scores\n   */\n  async getCandidatesForJob(jobId) {\n    try {\n      console.log(`Fetching AI-ranked candidates for job: ${jobId}`);\n      const response = await this.api.get(`/jobs/${jobId}/candidates`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching candidates for job:', error);\n      // Return mock data for development\n      return this.getMockCandidatesForJob(jobId);\n    }\n  }\n\n  /**\n   * Get job recommendations for a candidate\n   * @param {string} candidateId - The candidate ID\n   * @returns {Promise<Object>} AI-recommended jobs for the candidate\n   */\n  async getJobRecommendationsForCandidate(candidateId) {\n    try {\n      const response = await this.api.get(`/candidates/${candidateId}/job-recommendations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job recommendations:', error);\n      return this.getMockJobRecommendations();\n    }\n  }\n\n  /**\n   * Analyze skill gaps for a candidate against job requirements\n   * @param {string} candidateId - The candidate ID\n   * @param {string} jobId - The job ID to analyze against\n   * @returns {Promise<Object>} Skill gap analysis\n   */\n  async analyzeSkillGap(candidateId, jobId) {\n    try {\n      const response = await this.api.post(`/analysis/skill-gap`, {\n        candidate_id: candidateId,\n        job_id: jobId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing skill gap:', error);\n      return this.getMockSkillGapAnalysis();\n    }\n  }\n\n  /**\n   * Upload and parse resume for AI analysis\n   * @param {File} resumeFile - The resume file to upload\n   * @returns {Promise<Object>} Parsed resume data with AI feedback\n   */\n  async uploadAndParseResume(resumeFile) {\n    try {\n      const formData = new FormData();\n      formData.append('resume_file', resumeFile);\n      const response = await this.api.post('/resumes/upload-and-parse', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading and parsing resume:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get AI insights for a job posting\n   * @param {string} jobId - The job ID\n   * @returns {Promise<Object>} AI insights and analytics for the job\n   */\n  async getJobInsights(jobId) {\n    try {\n      const response = await this.api.get(`/jobs/${jobId}/ai-insights`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job insights:', error);\n      return this.getMockJobInsights(jobId);\n    }\n  }\n\n  /**\n   * Get overall matching statistics for an employer\n   * @returns {Promise<Object>} Matching statistics and insights\n   */\n  async getEmployerMatchingStats() {\n    try {\n      const response = await this.api.get('/employers/matching-stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employer matching stats:', error);\n      return this.getMockEmployerStats();\n    }\n  }\n\n  /**\n   * Batch process multiple resumes for a job\n   * @param {string} jobId - The job ID\n   * @param {Array<string>} candidateIds - Array of candidate IDs to process\n   * @returns {Promise<Object>} Batch processing results\n   */\n  async batchProcessCandidates(jobId, candidateIds) {\n    try {\n      const response = await this.api.post('/jobs/batch-process-candidates', {\n        job_id: jobId,\n        candidate_ids: candidateIds\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error batch processing candidates:', error);\n      throw error;\n    }\n  }\n\n  // Mock data methods for development/fallback\n  getMockCandidatesForJob(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        job_title: \"Senior Software Engineer\",\n        total_candidates: 12,\n        average_match_score: 78.5,\n        candidates: [{\n          user_id: \"candidate_1\",\n          user_name: \"Alex Johnson\",\n          user_email: \"alex.johnson@email.com\",\n          resume_id: \"resume_1\",\n          match_score: 92.5,\n          matching_skills: [\"Python\", \"React\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n          missing_skills: [\"Kubernetes\", \"GraphQL\"],\n          experience_level: \"senior\",\n          location: \"San Francisco, CA\",\n          years_experience: 6,\n          summary: \"Experienced full-stack developer with strong ML background\",\n          key_achievements: [\"Led development of ML recommendation system\", \"Reduced API response time by 40%\", \"Mentored 5 junior developers\"]\n        }, {\n          user_id: \"candidate_2\",\n          user_name: \"Sarah Chen\",\n          user_email: \"sarah.chen@email.com\",\n          resume_id: \"resume_2\",\n          match_score: 87.3,\n          matching_skills: [\"Python\", \"Django\", \"AWS\", \"Docker\", \"Redis\"],\n          missing_skills: [\"React\", \"Machine Learning\", \"Kubernetes\"],\n          experience_level: \"mid\",\n          location: \"Seattle, WA\",\n          years_experience: 4,\n          summary: \"Backend specialist with cloud infrastructure expertise\",\n          key_achievements: [\"Architected microservices platform\", \"Improved system reliability to 99.9%\", \"Led AWS migration project\"]\n        }, {\n          user_id: \"candidate_3\",\n          user_name: \"Michael Rodriguez\",\n          user_email: \"michael.rodriguez@email.com\",\n          resume_id: \"resume_3\",\n          match_score: 82.1,\n          matching_skills: [\"JavaScript\", \"React\", \"Node.js\", \"MongoDB\"],\n          missing_skills: [\"Python\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n          experience_level: \"mid\",\n          location: \"Austin, TX\",\n          years_experience: 3,\n          summary: \"Frontend-focused developer with full-stack capabilities\",\n          key_achievements: [\"Built responsive web applications\", \"Optimized frontend performance by 60%\", \"Implemented modern UI/UX designs\"]\n        }, {\n          user_id: \"candidate_4\",\n          user_name: \"Emily Park\",\n          user_email: \"emily.park@email.com\",\n          resume_id: \"resume_4\",\n          match_score: 79.8,\n          matching_skills: [\"Python\", \"Machine Learning\", \"TensorFlow\", \"SQL\"],\n          missing_skills: [\"React\", \"AWS\", \"Docker\", \"Kubernetes\"],\n          experience_level: \"entry\",\n          location: \"New York, NY\",\n          years_experience: 2,\n          summary: \"Data science background transitioning to software engineering\",\n          key_achievements: [\"Developed predictive models\", \"Published ML research paper\", \"Built data visualization dashboards\"]\n        }]\n      }\n    };\n  }\n  getMockJobRecommendations() {\n    return {\n      success: true,\n      data: {\n        total_recommendations: 8,\n        recommendations: [{\n          job: {\n            _id: \"job_1\",\n            title: \"Machine Learning Engineer\",\n            company_name: \"TechCorp\",\n            location: \"San Francisco, CA\",\n            salary_range: \"$130,000 - $180,000\"\n          },\n          match_score: 94.2,\n          matching_skills: [\"Python\", \"TensorFlow\", \"AWS\", \"Docker\"]\n        }, {\n          job: {\n            _id: \"job_2\",\n            title: \"Senior Backend Developer\",\n            company_name: \"StartupXYZ\",\n            location: \"Remote\",\n            salary_range: \"$120,000 - $160,000\"\n          },\n          match_score: 88.7,\n          matching_skills: [\"Python\", \"PostgreSQL\", \"Redis\", \"API Development\"]\n        }]\n      }\n    };\n  }\n  getMockSkillGapAnalysis() {\n    return {\n      success: true,\n      data: {\n        skill_coverage: 73.2,\n        gap_score: 26.8,\n        critical_gaps: 2,\n        matching_skills_count: 8,\n        missing_skills_count: 3,\n        matching_skills: [\"Python\", \"React\", \"SQL\", \"Git\", \"Agile\"],\n        missing_skills: [\"Kubernetes\", \"GraphQL\", \"Microservices\"],\n        recommendations: [\"Focus on learning Kubernetes for container orchestration\", \"Consider GraphQL for modern API development\", \"Gain experience with microservices architecture\"]\n      }\n    };\n  }\n  getMockJobInsights(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        application_trends: {\n          total_applications: 45,\n          applications_this_week: 12,\n          application_rate: \"2.1 per day\",\n          trending_up: true\n        },\n        candidate_quality: {\n          average_match_score: 76.3,\n          high_quality_candidates: 18,\n          candidates_above_80_percent: 12\n        },\n        skill_demand: {\n          most_common_skills: [\"Python\", \"React\", \"SQL\", \"AWS\"],\n          rare_skills: [\"Kubernetes\", \"GraphQL\", \"Rust\"],\n          skill_gap_frequency: {\n            \"Kubernetes\": 67,\n            \"Machine Learning\": 43,\n            \"GraphQL\": 38\n          }\n        },\n        recommendations: [\"Consider making Kubernetes optional to increase candidate pool\", \"High-quality candidates are actively applying\", \"Your salary range is competitive for this market\"]\n      }\n    };\n  }\n  getMockEmployerStats() {\n    return {\n      success: true,\n      data: {\n        total_jobs_posted: 8,\n        total_applications: 156,\n        average_match_score: 74.2,\n        successful_hires: 3,\n        time_to_hire: \"18 days\",\n        top_performing_jobs: [{\n          job_id: \"job_1\",\n          title: \"Senior Developer\",\n          applications: 23,\n          avg_match_score: 82.1\n        }, {\n          job_id: \"job_2\",\n          title: \"Product Manager\",\n          applications: 31,\n          avg_match_score: 79.8\n        }],\n        candidate_source_analysis: {\n          direct_applications: 45,\n          ai_recommendations: 32,\n          referrals: 18,\n          job_boards: 61\n        },\n        skill_trends: {\n          most_in_demand: [\"Python\", \"React\", \"AWS\", \"Machine Learning\"],\n          emerging_skills: [\"Rust\", \"GraphQL\", \"Kubernetes\", \"WebAssembly\"],\n          skill_gaps: [\"DevOps\", \"Cloud Architecture\", \"Data Engineering\"]\n        }\n      }\n    };\n  }\n}\n\n// Export singleton instance\nconst aiMatchingAPI = new AIMatchingAPI();\nexport default aiMatchingAPI;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AIMatchingAPI","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","console","data","message","getCandidatesForJob","jobId","log","get","getMockCandidatesForJob","getJobRecommendationsForCandidate","candidateId","getMockJobRecommendations","analyzeSkillGap","post","candidate_id","job_id","getMockSkillGapAnalysis","uploadAndParseResume","resumeFile","formData","FormData","append","getJobInsights","getMockJobInsights","getEmployerMatchingStats","getMockEmployerStats","batchProcessCandidates","candidateIds","candidate_ids","success","job_title","total_candidates","average_match_score","candidates","user_id","user_name","user_email","resume_id","match_score","matching_skills","missing_skills","experience_level","location","years_experience","summary","key_achievements","total_recommendations","recommendations","job","_id","title","company_name","salary_range","skill_coverage","gap_score","critical_gaps","matching_skills_count","missing_skills_count","application_trends","total_applications","applications_this_week","application_rate","trending_up","candidate_quality","high_quality_candidates","candidates_above_80_percent","skill_demand","most_common_skills","rare_skills","skill_gap_frequency","total_jobs_posted","successful_hires","time_to_hire","top_performing_jobs","applications","avg_match_score","candidate_source_analysis","direct_applications","ai_recommendations","referrals","job_boards","skill_trends","most_in_demand","emerging_skills","skill_gaps","aiMatchingAPI"],"sources":["/Users/surajj/Desktop/JobPortal1/frontend/src/services/aiMatchingAPI.js"],"sourcesContent":["/**\n * AI Matching API Service\n * Handles communication with the Python backend for AI-powered job matching and candidate screening\n */\n\nimport axios from 'axios';\n\n// Backend API base URL (adjust based on your backend configuration)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nclass AIMatchingAPI {\n  constructor() {\n    this.api = axios.create({\n      baseURL: `${API_BASE_URL}/api`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Add request interceptor to include auth token\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Add response interceptor for error handling\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        console.error('API Error:', error.response?.data || error.message);\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   * Get AI-ranked candidates for a specific job\n   * @param {string} jobId - The job ID to get candidates for\n   * @returns {Promise<Object>} AI-ranked candidates with match scores\n   */\n  async getCandidatesForJob(jobId) {\n    try {\n      console.log(`Fetching AI-ranked candidates for job: ${jobId}`);\n      const response = await this.api.get(`/jobs/${jobId}/candidates`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching candidates for job:', error);\n      // Return mock data for development\n      return this.getMockCandidatesForJob(jobId);\n    }\n  }\n\n  /**\n   * Get job recommendations for a candidate\n   * @param {string} candidateId - The candidate ID\n   * @returns {Promise<Object>} AI-recommended jobs for the candidate\n   */\n  async getJobRecommendationsForCandidate(candidateId) {\n    try {\n      const response = await this.api.get(`/candidates/${candidateId}/job-recommendations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job recommendations:', error);\n      return this.getMockJobRecommendations();\n    }\n  }\n\n  /**\n   * Analyze skill gaps for a candidate against job requirements\n   * @param {string} candidateId - The candidate ID\n   * @param {string} jobId - The job ID to analyze against\n   * @returns {Promise<Object>} Skill gap analysis\n   */\n  async analyzeSkillGap(candidateId, jobId) {\n    try {\n      const response = await this.api.post(`/analysis/skill-gap`, {\n        candidate_id: candidateId,\n        job_id: jobId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing skill gap:', error);\n      return this.getMockSkillGapAnalysis();\n    }\n  }\n\n  /**\n   * Upload and parse resume for AI analysis\n   * @param {File} resumeFile - The resume file to upload\n   * @returns {Promise<Object>} Parsed resume data with AI feedback\n   */\n  async uploadAndParseResume(resumeFile) {\n    try {\n      const formData = new FormData();\n      formData.append('resume_file', resumeFile);\n\n      const response = await this.api.post('/resumes/upload-and-parse', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading and parsing resume:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get AI insights for a job posting\n   * @param {string} jobId - The job ID\n   * @returns {Promise<Object>} AI insights and analytics for the job\n   */\n  async getJobInsights(jobId) {\n    try {\n      const response = await this.api.get(`/jobs/${jobId}/ai-insights`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job insights:', error);\n      return this.getMockJobInsights(jobId);\n    }\n  }\n\n  /**\n   * Get overall matching statistics for an employer\n   * @returns {Promise<Object>} Matching statistics and insights\n   */\n  async getEmployerMatchingStats() {\n    try {\n      const response = await this.api.get('/employers/matching-stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employer matching stats:', error);\n      return this.getMockEmployerStats();\n    }\n  }\n\n  /**\n   * Batch process multiple resumes for a job\n   * @param {string} jobId - The job ID\n   * @param {Array<string>} candidateIds - Array of candidate IDs to process\n   * @returns {Promise<Object>} Batch processing results\n   */\n  async batchProcessCandidates(jobId, candidateIds) {\n    try {\n      const response = await this.api.post('/jobs/batch-process-candidates', {\n        job_id: jobId,\n        candidate_ids: candidateIds\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error batch processing candidates:', error);\n      throw error;\n    }\n  }\n\n  // Mock data methods for development/fallback\n  getMockCandidatesForJob(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        job_title: \"Senior Software Engineer\",\n        total_candidates: 12,\n        average_match_score: 78.5,\n        candidates: [\n          {\n            user_id: \"candidate_1\",\n            user_name: \"Alex Johnson\",\n            user_email: \"alex.johnson@email.com\",\n            resume_id: \"resume_1\",\n            match_score: 92.5,\n            matching_skills: [\"Python\", \"React\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n            missing_skills: [\"Kubernetes\", \"GraphQL\"],\n            experience_level: \"senior\",\n            location: \"San Francisco, CA\",\n            years_experience: 6,\n            summary: \"Experienced full-stack developer with strong ML background\",\n            key_achievements: [\n              \"Led development of ML recommendation system\",\n              \"Reduced API response time by 40%\",\n              \"Mentored 5 junior developers\"\n            ]\n          },\n          {\n            user_id: \"candidate_2\",\n            user_name: \"Sarah Chen\",\n            user_email: \"sarah.chen@email.com\",\n            resume_id: \"resume_2\",\n            match_score: 87.3,\n            matching_skills: [\"Python\", \"Django\", \"AWS\", \"Docker\", \"Redis\"],\n            missing_skills: [\"React\", \"Machine Learning\", \"Kubernetes\"],\n            experience_level: \"mid\",\n            location: \"Seattle, WA\",\n            years_experience: 4,\n            summary: \"Backend specialist with cloud infrastructure expertise\",\n            key_achievements: [\n              \"Architected microservices platform\",\n              \"Improved system reliability to 99.9%\",\n              \"Led AWS migration project\"\n            ]\n          },\n          {\n            user_id: \"candidate_3\",\n            user_name: \"Michael Rodriguez\",\n            user_email: \"michael.rodriguez@email.com\",\n            resume_id: \"resume_3\",\n            match_score: 82.1,\n            matching_skills: [\"JavaScript\", \"React\", \"Node.js\", \"MongoDB\"],\n            missing_skills: [\"Python\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n            experience_level: \"mid\",\n            location: \"Austin, TX\",\n            years_experience: 3,\n            summary: \"Frontend-focused developer with full-stack capabilities\",\n            key_achievements: [\n              \"Built responsive web applications\",\n              \"Optimized frontend performance by 60%\",\n              \"Implemented modern UI/UX designs\"\n            ]\n          },\n          {\n            user_id: \"candidate_4\",\n            user_name: \"Emily Park\",\n            user_email: \"emily.park@email.com\",\n            resume_id: \"resume_4\",\n            match_score: 79.8,\n            matching_skills: [\"Python\", \"Machine Learning\", \"TensorFlow\", \"SQL\"],\n            missing_skills: [\"React\", \"AWS\", \"Docker\", \"Kubernetes\"],\n            experience_level: \"entry\",\n            location: \"New York, NY\",\n            years_experience: 2,\n            summary: \"Data science background transitioning to software engineering\",\n            key_achievements: [\n              \"Developed predictive models\",\n              \"Published ML research paper\",\n              \"Built data visualization dashboards\"\n            ]\n          }\n        ]\n      }\n    };\n  }\n\n  getMockJobRecommendations() {\n    return {\n      success: true,\n      data: {\n        total_recommendations: 8,\n        recommendations: [\n          {\n            job: {\n              _id: \"job_1\",\n              title: \"Machine Learning Engineer\",\n              company_name: \"TechCorp\",\n              location: \"San Francisco, CA\",\n              salary_range: \"$130,000 - $180,000\"\n            },\n            match_score: 94.2,\n            matching_skills: [\"Python\", \"TensorFlow\", \"AWS\", \"Docker\"]\n          },\n          {\n            job: {\n              _id: \"job_2\",\n              title: \"Senior Backend Developer\",\n              company_name: \"StartupXYZ\",\n              location: \"Remote\",\n              salary_range: \"$120,000 - $160,000\"\n            },\n            match_score: 88.7,\n            matching_skills: [\"Python\", \"PostgreSQL\", \"Redis\", \"API Development\"]\n          }\n        ]\n      }\n    };\n  }\n\n  getMockSkillGapAnalysis() {\n    return {\n      success: true,\n      data: {\n        skill_coverage: 73.2,\n        gap_score: 26.8,\n        critical_gaps: 2,\n        matching_skills_count: 8,\n        missing_skills_count: 3,\n        matching_skills: [\"Python\", \"React\", \"SQL\", \"Git\", \"Agile\"],\n        missing_skills: [\"Kubernetes\", \"GraphQL\", \"Microservices\"],\n        recommendations: [\n          \"Focus on learning Kubernetes for container orchestration\",\n          \"Consider GraphQL for modern API development\",\n          \"Gain experience with microservices architecture\"\n        ]\n      }\n    };\n  }\n\n  getMockJobInsights(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        application_trends: {\n          total_applications: 45,\n          applications_this_week: 12,\n          application_rate: \"2.1 per day\",\n          trending_up: true\n        },\n        candidate_quality: {\n          average_match_score: 76.3,\n          high_quality_candidates: 18,\n          candidates_above_80_percent: 12\n        },\n        skill_demand: {\n          most_common_skills: [\"Python\", \"React\", \"SQL\", \"AWS\"],\n          rare_skills: [\"Kubernetes\", \"GraphQL\", \"Rust\"],\n          skill_gap_frequency: {\n            \"Kubernetes\": 67,\n            \"Machine Learning\": 43,\n            \"GraphQL\": 38\n          }\n        },\n        recommendations: [\n          \"Consider making Kubernetes optional to increase candidate pool\",\n          \"High-quality candidates are actively applying\",\n          \"Your salary range is competitive for this market\"\n        ]\n      }\n    };\n  }\n\n  getMockEmployerStats() {\n    return {\n      success: true,\n      data: {\n        total_jobs_posted: 8,\n        total_applications: 156,\n        average_match_score: 74.2,\n        successful_hires: 3,\n        time_to_hire: \"18 days\",\n        top_performing_jobs: [\n          {\n            job_id: \"job_1\",\n            title: \"Senior Developer\",\n            applications: 23,\n            avg_match_score: 82.1\n          },\n          {\n            job_id: \"job_2\", \n            title: \"Product Manager\",\n            applications: 31,\n            avg_match_score: 79.8\n          }\n        ],\n        candidate_source_analysis: {\n          direct_applications: 45,\n          ai_recommendations: 32,\n          referrals: 18,\n          job_boards: 61\n        },\n        skill_trends: {\n          most_in_demand: [\"Python\", \"React\", \"AWS\", \"Machine Learning\"],\n          emerging_skills: [\"Rust\", \"GraphQL\", \"Kubernetes\", \"WebAssembly\"],\n          skill_gaps: [\"DevOps\", \"Cloud Architecture\", \"Data Engineering\"]\n        }\n      }\n    };\n  }\n}\n\n// Export singleton instance\nconst aiMatchingAPI = new AIMatchingAPI();\nexport default aiMatchingAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}