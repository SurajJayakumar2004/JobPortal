{"ast":null,"code":"/**\n * API service layer for communicating with the FastAPI backend.\n * Contains configured axios instance and all API call functions.\n */import axios from'axios';import{logError,retryApiCall}from'../utils/errorHandler';// Configure axios instance with base URL\n// Create axios instance with base configuration\nconst api=axios.create({baseURL:'http://localhost:8001',timeout:30000,// Increased timeout for file uploads\nheaders:{'Content-Type':'application/json'}});// Request interceptor to add authentication token to requests\napi.interceptors.request.use(config=>{var _config$method;const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}console.log('API Request:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url,'Token:',token?'Present':'None');return config;},error=>{logError(error,'API Request Interceptor');return Promise.reject(error);});// Response interceptor to handle authentication errors and retries\napi.interceptors.response.use(response=>response,async error=>{var _error$response,_error$response2,_error$response3;const originalRequest=error.config;logError(error,'API Response',{url:originalRequest===null||originalRequest===void 0?void 0:originalRequest.url,method:originalRequest===null||originalRequest===void 0?void 0:originalRequest.method,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status});// Handle authentication errors\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===401&&!originalRequest._retry){originalRequest._retry=true;// Clear auth data\nlocalStorage.removeItem('token');localStorage.removeItem('user');// Redirect to login only if not already on auth pages\nconst currentPath=window.location.pathname;if(currentPath!=='/login'&&currentPath!=='/register'){window.location.href='/login';}}// Handle rate limiting with exponential backoff\nif(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===429&&!originalRequest._retryCount){originalRequest._retryCount=0;const retryAfter=error.response.headers['retry-after']||1;await new Promise(resolve=>setTimeout(resolve,retryAfter*1000));originalRequest._retryCount++;if(originalRequest._retryCount<3){return api(originalRequest);}}return Promise.reject(error);});// Auth API calls\nexport const authAPI={/**\n   * Register a new user (legacy endpoint)\n   * @param {Object} userData - User registration data\n   * @param {string} userData.email - User email\n   * @param {string} userData.password - User password\n   * @param {string} userData.role - User role (student/employer)\n   */register:userData=>api.post('/api/auth/register',userData),/**\n   * Register a new employer with organization details\n   * @param {Object} employerData - Employer registration data\n   * @param {string} employerData.full_name - Employer's full name\n   * @param {string} employerData.organization_name - Organization name\n   * @param {string} employerData.organization_email - Organization email\n   * @param {string} employerData.phone_number - Phone number\n   * @param {string} employerData.password - Password\n   */registerEmployer:employerData=>api.post('/api/auth/register/employer',employerData),/**\n   * Register a new student with personal details\n   * @param {Object} studentData - Student registration data\n   * @param {string} studentData.email - Student email\n   * @param {string} studentData.full_name - Student's full name\n   * @param {string} studentData.phone_number - Phone number (optional)\n   * @param {string} studentData.password - Password\n   */registerStudent:studentData=>api.post('/api/auth/register/student',studentData),/**\n   * Login user with email and password\n   * @param {Object} credentials - Login credentials\n   * @param {string} credentials.username - User email (username)\n   * @param {string} credentials.password - User password\n   */login:credentials=>{return api.post('/api/auth/login',{email:credentials.username,// Backend expects 'email' field\npassword:credentials.password});}};// User API calls\nexport const userAPI={/**\n   * Get current user profile data\n   * Requires authentication token\n   */getProfile:()=>api.get('/api/auth/me')};// Resume API calls\nexport const resumeAPI={/**\n   * Upload resume file for AI parsing and analysis\n   * @param {File} file - Resume file (.pdf or .docx)\n   */uploadResume:file=>{const formData=new FormData();formData.append('file',file);return api.post('/api/resumes/upload',formData,{headers:{'Content-Type':'multipart/form-data'}});},/**\n   * Get AI feedback for a specific resume\n   * @param {string} resumeId - Resume ID\n   */getFeedback:resumeId=>api.get(`/api/resumes/${resumeId}/feedback`)};// Jobs API calls\nexport const jobsAPI={/**\n   * Get all available jobs (public endpoint)\n   * @param {Object} params - Query parameters for filtering\n   */getJobs:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return api.get('/api/jobs',{params});},/**\n   * Get specific job details by ID\n   * @param {string} jobId - Job ID\n   */getJobById:jobId=>api.get(`/api/jobs/${jobId}`),/**\n   * Create a new job posting (employer only)\n   * @param {Object} jobData - Job posting data\n   */createJob:jobData=>api.post('/api/jobs',jobData),/**\n   * Get candidates for a specific job (employer only)\n   * @param {string} jobId - Job ID\n   */getJobCandidates:jobId=>api.get(`/api/jobs/${jobId}/candidates`)};// Export the configured axios instance as default\nexport default api;","map":{"version":3,"names":["axios","logError","retryApiCall","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","token","localStorage","getItem","Authorization","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","_error$response2","_error$response3","originalRequest","status","_retry","removeItem","currentPath","window","location","pathname","href","_retryCount","retryAfter","resolve","setTimeout","authAPI","register","userData","post","registerEmployer","employerData","registerStudent","studentData","login","credentials","email","username","password","userAPI","getProfile","get","resumeAPI","uploadResume","file","formData","FormData","append","getFeedback","resumeId","jobsAPI","getJobs","params","arguments","length","undefined","getJobById","jobId","createJob","jobData","getJobCandidates"],"sources":["/Users/surajj/Desktop/JobPortal1/frontend/src/services/api.js"],"sourcesContent":["/**\n * API service layer for communicating with the FastAPI backend.\n * Contains configured axios instance and all API call functions.\n */\n\nimport axios from 'axios';\nimport { logError, retryApiCall } from '../utils/errorHandler';\n\n// Configure axios instance with base URL\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: 'http://localhost:8001',\n  timeout: 30000, // Increased timeout for file uploads\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add authentication token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    console.log('API Request:', config.method?.toUpperCase(), config.url, 'Token:', token ? 'Present' : 'None');\n    return config;\n  },\n  (error) => {\n    logError(error, 'API Request Interceptor');\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle authentication errors and retries\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    logError(error, 'API Response', {\n      url: originalRequest?.url,\n      method: originalRequest?.method,\n      status: error.response?.status\n    });\n    \n    // Handle authentication errors\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      \n      // Clear auth data\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      \n      // Redirect to login only if not already on auth pages\n      const currentPath = window.location.pathname;\n      if (currentPath !== '/login' && currentPath !== '/register') {\n        window.location.href = '/login';\n      }\n    }\n    \n    // Handle rate limiting with exponential backoff\n    if (error.response?.status === 429 && !originalRequest._retryCount) {\n      originalRequest._retryCount = 0;\n      \n      const retryAfter = error.response.headers['retry-after'] || 1;\n      await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n      \n      originalRequest._retryCount++;\n      if (originalRequest._retryCount < 3) {\n        return api(originalRequest);\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Auth API calls\nexport const authAPI = {\n  /**\n   * Register a new user (legacy endpoint)\n   * @param {Object} userData - User registration data\n   * @param {string} userData.email - User email\n   * @param {string} userData.password - User password\n   * @param {string} userData.role - User role (student/employer)\n   */\n  register: (userData) => api.post('/api/auth/register', userData),\n\n  /**\n   * Register a new employer with organization details\n   * @param {Object} employerData - Employer registration data\n   * @param {string} employerData.full_name - Employer's full name\n   * @param {string} employerData.organization_name - Organization name\n   * @param {string} employerData.organization_email - Organization email\n   * @param {string} employerData.phone_number - Phone number\n   * @param {string} employerData.password - Password\n   */\n  registerEmployer: (employerData) => api.post('/api/auth/register/employer', employerData),\n\n  /**\n   * Register a new student with personal details\n   * @param {Object} studentData - Student registration data\n   * @param {string} studentData.email - Student email\n   * @param {string} studentData.full_name - Student's full name\n   * @param {string} studentData.phone_number - Phone number (optional)\n   * @param {string} studentData.password - Password\n   */\n  registerStudent: (studentData) => api.post('/api/auth/register/student', studentData),\n\n  /**\n   * Login user with email and password\n   * @param {Object} credentials - Login credentials\n   * @param {string} credentials.username - User email (username)\n   * @param {string} credentials.password - User password\n   */\n  login: (credentials) => {\n    return api.post('/api/auth/login', {\n      email: credentials.username, // Backend expects 'email' field\n      password: credentials.password\n    });\n  },\n};\n\n// User API calls\nexport const userAPI = {\n  /**\n   * Get current user profile data\n   * Requires authentication token\n   */\n  getProfile: () => api.get('/api/auth/me'),\n};\n\n// Resume API calls\nexport const resumeAPI = {\n  /**\n   * Upload resume file for AI parsing and analysis\n   * @param {File} file - Resume file (.pdf or .docx)\n   */\n  uploadResume: (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return api.post('/api/resumes/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n\n  /**\n   * Get AI feedback for a specific resume\n   * @param {string} resumeId - Resume ID\n   */\n  getFeedback: (resumeId) => api.get(`/api/resumes/${resumeId}/feedback`),\n};\n\n// Jobs API calls\nexport const jobsAPI = {\n  /**\n   * Get all available jobs (public endpoint)\n   * @param {Object} params - Query parameters for filtering\n   */\n  getJobs: (params = {}) => api.get('/api/jobs', { params }),\n\n  /**\n   * Get specific job details by ID\n   * @param {string} jobId - Job ID\n   */\n  getJobById: (jobId) => api.get(`/api/jobs/${jobId}`),\n\n  /**\n   * Create a new job posting (employer only)\n   * @param {Object} jobData - Job posting data\n   */\n  createJob: (jobData) => api.post('/api/jobs', jobData),\n\n  /**\n   * Get candidates for a specific job (employer only)\n   * @param {string} jobId - Job ID\n   */\n  getJobCandidates: (jobId) => api.get(`/api/jobs/${jobId}/candidates`),\n};\n\n// Export the configured axios instance as default\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}