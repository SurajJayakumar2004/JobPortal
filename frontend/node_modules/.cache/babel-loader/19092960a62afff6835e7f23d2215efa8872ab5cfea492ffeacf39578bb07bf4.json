{"ast":null,"code":"// Resume Analysis Service\nclass ResumeAnalyzer {\n  constructor() {\n    // Common technical skills that might appear in resumes\n    this.skillsDatabase = [\n    // Programming Languages\n    'JavaScript', 'Python', 'Java', 'C++', 'C#', 'PHP', 'Ruby', 'Go', 'Rust', 'TypeScript', 'Swift', 'Kotlin', 'Scala', 'R', 'MATLAB', 'Perl', 'Objective-C', 'Dart', 'F#', 'Haskell',\n    // Web Technologies\n    'HTML', 'CSS', 'React', 'Angular', 'Vue.js', 'Node.js', 'Express.js', 'jQuery', 'Bootstrap', 'Sass', 'Less', 'Webpack', 'Babel', 'Redux', 'GraphQL', 'REST API', 'JSON', 'XML',\n    // Databases\n    'MySQL', 'PostgreSQL', 'MongoDB', 'SQLite', 'Redis', 'Cassandra', 'DynamoDB', 'Oracle', 'SQL Server', 'MariaDB', 'Firebase', 'Elasticsearch', 'Neo4j',\n    // Cloud & DevOps\n    'AWS', 'Azure', 'Google Cloud', 'Docker', 'Kubernetes', 'Jenkins', 'Git', 'GitHub', 'GitLab', 'CI/CD', 'Terraform', 'Ansible', 'Chef', 'Puppet', 'Nginx', 'Apache',\n    // Data Science & AI\n    'Machine Learning', 'Deep Learning', 'TensorFlow', 'PyTorch', 'Pandas', 'NumPy', 'Scikit-learn', 'Jupyter', 'Data Analysis', 'Statistics', 'Big Data', 'Hadoop', 'Spark',\n    // Mobile Development\n    'React Native', 'Flutter', 'Xamarin', 'Ionic', 'Cordova', 'Android', 'iOS',\n    // Design & UX\n    'Figma', 'Sketch', 'Adobe XD', 'Photoshop', 'Illustrator', 'InVision', 'Principle', 'UI/UX Design', 'User Research', 'Wireframing', 'Prototyping',\n    // Testing\n    'Jest', 'Mocha', 'Cypress', 'Selenium', 'JUnit', 'PyTest', 'Testing',\n    // Project Management\n    'Agile', 'Scrum', 'Kanban', 'Jira', 'Trello', 'Asana', 'Confluence',\n    // Soft Skills\n    'Leadership', 'Communication', 'Teamwork', 'Problem Solving', 'Critical Thinking', 'Project Management', 'Time Management', 'Adaptability', 'Creativity'];\n  }\n\n  // Extract text from file (simplified version)\n  async extractTextFromFile(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const text = event.target.result;\n        resolve(text);\n      };\n      reader.onerror = error => {\n        reject(error);\n      };\n\n      // For now, only handle text files and basic text extraction\n      if (file.type === 'text/plain') {\n        reader.readAsText(file);\n      } else {\n        // For PDF/DOC files, we'd need additional libraries\n        // For demo purposes, we'll return a placeholder\n        resolve('Sample resume text with JavaScript React Node.js Python Machine Learning');\n      }\n    });\n  }\n\n  // Extract skills from resume text\n  extractSkills(resumeText) {\n    if (!resumeText || typeof resumeText !== 'string') {\n      return [];\n    }\n    const foundSkills = new Set();\n    const normalizedText = resumeText.toLowerCase();\n\n    // Look for skills in the text\n    this.skillsDatabase.forEach(skill => {\n      const normalizedSkill = skill.toLowerCase();\n\n      // Check for exact matches and common variations\n      const patterns = [normalizedSkill, normalizedSkill.replace(/\\./g, ''),\n      // Remove dots (e.g., Node.js -> nodejs)\n      normalizedSkill.replace(/\\s+/g, ''),\n      // Remove spaces\n      normalizedSkill.replace(/-/g, '') // Remove hyphens\n      ];\n      patterns.forEach(pattern => {\n        if (normalizedText.includes(pattern)) {\n          foundSkills.add(skill);\n        }\n      });\n    });\n    return Array.from(foundSkills);\n  }\n\n  // Analyze resume and return skills with confidence scores\n  async analyzeResume(file) {\n    try {\n      const resumeText = await this.extractTextFromFile(file);\n      const extractedSkills = this.extractSkills(resumeText);\n\n      // Calculate confidence scores based on context\n      const skillsWithConfidence = extractedSkills.map(skill => ({\n        skill,\n        confidence: this.calculateConfidence(skill, resumeText)\n      }));\n\n      // Sort by confidence\n      skillsWithConfidence.sort((a, b) => b.confidence - a.confidence);\n      return {\n        success: true,\n        skills: skillsWithConfidence.map(s => s.skill),\n        skillsWithConfidence,\n        totalSkillsFound: extractedSkills.length,\n        resumeText: resumeText.substring(0, 500) + '...' // First 500 chars for preview\n      };\n    } catch (error) {\n      console.error('Resume analysis error:', error);\n      return {\n        success: false,\n        error: 'Failed to analyze resume. Please try again.',\n        skills: []\n      };\n    }\n  }\n\n  // Calculate confidence score for a skill based on context\n  calculateConfidence(skill, text) {\n    const normalizedText = text.toLowerCase();\n    const normalizedSkill = skill.toLowerCase();\n    let confidence = 0.5; // Base confidence\n\n    // Increase confidence if skill appears in typical resume sections\n    const resumeSections = ['skills', 'technical skills', 'technologies', 'programming languages', 'tools', 'frameworks', 'experience', 'projects'];\n    resumeSections.forEach(section => {\n      const sectionRegex = new RegExp(`${section}[^\\\\n]*${normalizedSkill}`, 'i');\n      if (sectionRegex.test(normalizedText)) {\n        confidence += 0.3;\n      }\n    });\n\n    // Increase confidence if skill appears multiple times\n    const occurrences = (normalizedText.match(new RegExp(normalizedSkill, 'g')) || []).length;\n    confidence += Math.min(occurrences * 0.1, 0.3);\n\n    // Increase confidence if skill appears near project/work descriptions\n    const contextWords = ['developed', 'built', 'created', 'implemented', 'used', 'worked with'];\n    contextWords.forEach(word => {\n      const contextRegex = new RegExp(`${word}[^.]{0,50}${normalizedSkill}`, 'i');\n      if (contextRegex.test(normalizedText)) {\n        confidence += 0.2;\n      }\n    });\n    return Math.min(confidence, 1.0);\n  }\n\n  // Get skill suggestions based on found skills\n  getSkillSuggestions(foundSkills) {\n    const suggestions = new Map();\n\n    // Skill relationships and suggestions\n    const skillRelationships = {\n      'JavaScript': ['React', 'Node.js', 'TypeScript', 'Vue.js', 'Angular'],\n      'Python': ['Django', 'Flask', 'Pandas', 'NumPy', 'Machine Learning'],\n      'React': ['Redux', 'Next.js', 'GraphQL', 'TypeScript'],\n      'Node.js': ['Express.js', 'MongoDB', 'REST API'],\n      'Machine Learning': ['TensorFlow', 'PyTorch', 'Scikit-learn', 'Python'],\n      'AWS': ['Docker', 'Kubernetes', 'Terraform', 'CI/CD'],\n      'Docker': ['Kubernetes', 'AWS', 'DevOps', 'CI/CD']\n    };\n    foundSkills.forEach(skill => {\n      if (skillRelationships[skill]) {\n        skillRelationships[skill].forEach(relatedSkill => {\n          if (!foundSkills.includes(relatedSkill)) {\n            suggestions.set(relatedSkill, (suggestions.get(relatedSkill) || 0) + 1);\n          }\n        });\n      }\n    });\n\n    // Sort suggestions by frequency\n    return Array.from(suggestions.entries()).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([skill]) => skill);\n  }\n}\n\n// Create and export singleton instance\nconst resumeAnalyzer = new ResumeAnalyzer();\nexport default resumeAnalyzer;","map":{"version":3,"names":["ResumeAnalyzer","constructor","skillsDatabase","extractTextFromFile","file","Promise","resolve","reject","reader","FileReader","onload","event","text","target","result","onerror","error","type","readAsText","extractSkills","resumeText","foundSkills","Set","normalizedText","toLowerCase","forEach","skill","normalizedSkill","patterns","replace","pattern","includes","add","Array","from","analyzeResume","extractedSkills","skillsWithConfidence","map","confidence","calculateConfidence","sort","a","b","success","skills","s","totalSkillsFound","length","substring","console","resumeSections","section","sectionRegex","RegExp","test","occurrences","match","Math","min","contextWords","word","contextRegex","getSkillSuggestions","suggestions","Map","skillRelationships","relatedSkill","set","get","entries","slice","resumeAnalyzer"],"sources":["/Users/surajj/Desktop/JobPortal1/frontend/src/services/resumeAnalyzer.js"],"sourcesContent":["// Resume Analysis Service\nclass ResumeAnalyzer {\n  constructor() {\n    // Common technical skills that might appear in resumes\n    this.skillsDatabase = [\n      // Programming Languages\n      'JavaScript', 'Python', 'Java', 'C++', 'C#', 'PHP', 'Ruby', 'Go', 'Rust', 'TypeScript',\n      'Swift', 'Kotlin', 'Scala', 'R', 'MATLAB', 'Perl', 'Objective-C', 'Dart', 'F#', 'Haskell',\n      \n      // Web Technologies\n      'HTML', 'CSS', 'React', 'Angular', 'Vue.js', 'Node.js', 'Express.js', 'jQuery', 'Bootstrap',\n      'Sass', 'Less', 'Webpack', 'Babel', 'Redux', 'GraphQL', 'REST API', 'JSON', 'XML',\n      \n      // Databases\n      'MySQL', 'PostgreSQL', 'MongoDB', 'SQLite', 'Redis', 'Cassandra', 'DynamoDB', 'Oracle',\n      'SQL Server', 'MariaDB', 'Firebase', 'Elasticsearch', 'Neo4j',\n      \n      // Cloud & DevOps\n      'AWS', 'Azure', 'Google Cloud', 'Docker', 'Kubernetes', 'Jenkins', 'Git', 'GitHub',\n      'GitLab', 'CI/CD', 'Terraform', 'Ansible', 'Chef', 'Puppet', 'Nginx', 'Apache',\n      \n      // Data Science & AI\n      'Machine Learning', 'Deep Learning', 'TensorFlow', 'PyTorch', 'Pandas', 'NumPy',\n      'Scikit-learn', 'Jupyter', 'Data Analysis', 'Statistics', 'Big Data', 'Hadoop', 'Spark',\n      \n      // Mobile Development\n      'React Native', 'Flutter', 'Xamarin', 'Ionic', 'Cordova', 'Android', 'iOS',\n      \n      // Design & UX\n      'Figma', 'Sketch', 'Adobe XD', 'Photoshop', 'Illustrator', 'InVision', 'Principle',\n      'UI/UX Design', 'User Research', 'Wireframing', 'Prototyping',\n      \n      // Testing\n      'Jest', 'Mocha', 'Cypress', 'Selenium', 'JUnit', 'PyTest', 'Testing',\n      \n      // Project Management\n      'Agile', 'Scrum', 'Kanban', 'Jira', 'Trello', 'Asana', 'Confluence',\n      \n      // Soft Skills\n      'Leadership', 'Communication', 'Teamwork', 'Problem Solving', 'Critical Thinking',\n      'Project Management', 'Time Management', 'Adaptability', 'Creativity'\n    ];\n  }\n\n  // Extract text from file (simplified version)\n  async extractTextFromFile(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      \n      reader.onload = (event) => {\n        const text = event.target.result;\n        resolve(text);\n      };\n      \n      reader.onerror = (error) => {\n        reject(error);\n      };\n\n      // For now, only handle text files and basic text extraction\n      if (file.type === 'text/plain') {\n        reader.readAsText(file);\n      } else {\n        // For PDF/DOC files, we'd need additional libraries\n        // For demo purposes, we'll return a placeholder\n        resolve('Sample resume text with JavaScript React Node.js Python Machine Learning');\n      }\n    });\n  }\n\n  // Extract skills from resume text\n  extractSkills(resumeText) {\n    if (!resumeText || typeof resumeText !== 'string') {\n      return [];\n    }\n\n    const foundSkills = new Set();\n    const normalizedText = resumeText.toLowerCase();\n\n    // Look for skills in the text\n    this.skillsDatabase.forEach(skill => {\n      const normalizedSkill = skill.toLowerCase();\n      \n      // Check for exact matches and common variations\n      const patterns = [\n        normalizedSkill,\n        normalizedSkill.replace(/\\./g, ''), // Remove dots (e.g., Node.js -> nodejs)\n        normalizedSkill.replace(/\\s+/g, ''), // Remove spaces\n        normalizedSkill.replace(/-/g, ''), // Remove hyphens\n      ];\n\n      patterns.forEach(pattern => {\n        if (normalizedText.includes(pattern)) {\n          foundSkills.add(skill);\n        }\n      });\n    });\n\n    return Array.from(foundSkills);\n  }\n\n  // Analyze resume and return skills with confidence scores\n  async analyzeResume(file) {\n    try {\n      const resumeText = await this.extractTextFromFile(file);\n      const extractedSkills = this.extractSkills(resumeText);\n      \n      // Calculate confidence scores based on context\n      const skillsWithConfidence = extractedSkills.map(skill => ({\n        skill,\n        confidence: this.calculateConfidence(skill, resumeText)\n      }));\n\n      // Sort by confidence\n      skillsWithConfidence.sort((a, b) => b.confidence - a.confidence);\n\n      return {\n        success: true,\n        skills: skillsWithConfidence.map(s => s.skill),\n        skillsWithConfidence,\n        totalSkillsFound: extractedSkills.length,\n        resumeText: resumeText.substring(0, 500) + '...' // First 500 chars for preview\n      };\n    } catch (error) {\n      console.error('Resume analysis error:', error);\n      return {\n        success: false,\n        error: 'Failed to analyze resume. Please try again.',\n        skills: []\n      };\n    }\n  }\n\n  // Calculate confidence score for a skill based on context\n  calculateConfidence(skill, text) {\n    const normalizedText = text.toLowerCase();\n    const normalizedSkill = skill.toLowerCase();\n    \n    let confidence = 0.5; // Base confidence\n    \n    // Increase confidence if skill appears in typical resume sections\n    const resumeSections = [\n      'skills', 'technical skills', 'technologies', 'programming languages',\n      'tools', 'frameworks', 'experience', 'projects'\n    ];\n    \n    resumeSections.forEach(section => {\n      const sectionRegex = new RegExp(`${section}[^\\\\n]*${normalizedSkill}`, 'i');\n      if (sectionRegex.test(normalizedText)) {\n        confidence += 0.3;\n      }\n    });\n\n    // Increase confidence if skill appears multiple times\n    const occurrences = (normalizedText.match(new RegExp(normalizedSkill, 'g')) || []).length;\n    confidence += Math.min(occurrences * 0.1, 0.3);\n\n    // Increase confidence if skill appears near project/work descriptions\n    const contextWords = ['developed', 'built', 'created', 'implemented', 'used', 'worked with'];\n    contextWords.forEach(word => {\n      const contextRegex = new RegExp(`${word}[^.]{0,50}${normalizedSkill}`, 'i');\n      if (contextRegex.test(normalizedText)) {\n        confidence += 0.2;\n      }\n    });\n\n    return Math.min(confidence, 1.0);\n  }\n\n  // Get skill suggestions based on found skills\n  getSkillSuggestions(foundSkills) {\n    const suggestions = new Map();\n    \n    // Skill relationships and suggestions\n    const skillRelationships = {\n      'JavaScript': ['React', 'Node.js', 'TypeScript', 'Vue.js', 'Angular'],\n      'Python': ['Django', 'Flask', 'Pandas', 'NumPy', 'Machine Learning'],\n      'React': ['Redux', 'Next.js', 'GraphQL', 'TypeScript'],\n      'Node.js': ['Express.js', 'MongoDB', 'REST API'],\n      'Machine Learning': ['TensorFlow', 'PyTorch', 'Scikit-learn', 'Python'],\n      'AWS': ['Docker', 'Kubernetes', 'Terraform', 'CI/CD'],\n      'Docker': ['Kubernetes', 'AWS', 'DevOps', 'CI/CD'],\n    };\n\n    foundSkills.forEach(skill => {\n      if (skillRelationships[skill]) {\n        skillRelationships[skill].forEach(relatedSkill => {\n          if (!foundSkills.includes(relatedSkill)) {\n            suggestions.set(relatedSkill, (suggestions.get(relatedSkill) || 0) + 1);\n          }\n        });\n      }\n    });\n\n    // Sort suggestions by frequency\n    return Array.from(suggestions.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([skill]) => skill);\n  }\n}\n\n// Create and export singleton instance\nconst resumeAnalyzer = new ResumeAnalyzer();\nexport default resumeAnalyzer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}