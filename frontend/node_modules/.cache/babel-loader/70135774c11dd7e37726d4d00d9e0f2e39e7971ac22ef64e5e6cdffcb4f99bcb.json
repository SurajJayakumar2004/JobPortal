{"ast":null,"code":"/**\n * AI Matching API Service\n * Handles communication with the Python backend for AI-powered job matching and candidate screening\n */\n\nimport axios from 'axios';\n\n// Backend API base URL (adjust based on your backend configuration)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nclass AIMatchingAPI {\n  constructor() {\n    this.api = axios.create({\n      baseURL: `${API_BASE_URL}/api`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Add request interceptor to include auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Add response interceptor for error handling\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Get AI-ranked candidates for a specific job\n   * @param {string} jobId - The job ID to get candidates for\n   * @returns {Promise<Object>} AI-ranked candidates with match scores\n   */\n  async getCandidatesForJob(jobId) {\n    try {\n      console.log(`Fetching AI-ranked candidates for job: ${jobId}`);\n      const response = await this.api.get(`/jobs/${jobId}/candidates`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching candidates for job:', error);\n      // Return mock data for development\n      return this.getMockCandidatesForJob(jobId);\n    }\n  }\n\n  /**\n   * Get job recommendations for a candidate\n   * @param {string} candidateId - The candidate ID\n   * @returns {Promise<Object>} AI-recommended jobs for the candidate\n   */\n  async getJobRecommendationsForCandidate(candidateId) {\n    try {\n      const response = await this.api.get(`/candidates/${candidateId}/job-recommendations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job recommendations:', error);\n      return this.getMockJobRecommendations();\n    }\n  }\n\n  /**\n   * Analyze skill gaps for a candidate against job requirements\n   * @param {string} candidateId - The candidate ID\n   * @param {string} jobId - The job ID to analyze against\n   * @returns {Promise<Object>} Skill gap analysis\n   */\n  async analyzeSkillGap(candidateId, jobId) {\n    try {\n      const response = await this.api.post(`/analysis/skill-gap`, {\n        candidate_id: candidateId,\n        job_id: jobId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing skill gap:', error);\n      return this.getMockSkillGapAnalysis();\n    }\n  }\n\n  /**\n   * Upload and parse resume for AI analysis\n   * @param {File} resumeFile - The resume file to upload\n   * @returns {Promise<Object>} Parsed resume data with AI feedback\n   */\n  async uploadAndParseResume(resumeFile) {\n    try {\n      const formData = new FormData();\n      formData.append('resume_file', resumeFile);\n      const response = await this.api.post('/resumes/upload-and-parse', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading and parsing resume:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get AI insights for a job posting\n   * @param {string} jobId - The job ID\n   * @returns {Promise<Object>} AI insights and analytics for the job\n   */\n  async getJobInsights(jobId) {\n    try {\n      const response = await this.api.get(`/jobs/${jobId}/ai-insights`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job insights:', error);\n      return this.getMockJobInsights(jobId);\n    }\n  }\n\n  /**\n   * Get overall matching statistics for an employer\n   * @returns {Promise<Object>} Matching statistics and insights\n   */\n  async getEmployerMatchingStats() {\n    try {\n      const response = await this.api.get('/employers/matching-stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employer matching stats:', error);\n      return this.getMockEmployerStats();\n    }\n  }\n\n  /**\n   * Batch process multiple resumes for a job\n   * @param {string} jobId - The job ID\n   * @param {Array<string>} candidateIds - Array of candidate IDs to process\n   * @returns {Promise<Object>} Batch processing results\n   */\n  async batchProcessCandidates(jobId, candidateIds) {\n    try {\n      const response = await this.api.post('/jobs/batch-process-candidates', {\n        job_id: jobId,\n        candidate_ids: candidateIds\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error batch processing candidates:', error);\n      throw error;\n    }\n  }\n\n  // Mock data methods for development/fallback\n  getMockCandidatesForJob(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        job_title: \"Senior Software Engineer\",\n        total_candidates: 12,\n        average_match_score: 78.5,\n        candidates: [{\n          user_id: \"candidate_1\",\n          user_name: \"Alex Johnson\",\n          user_email: \"alex.johnson@email.com\",\n          resume_id: \"resume_1\",\n          match_score: 92.5,\n          matching_skills: [\"Python\", \"React\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n          missing_skills: [\"Kubernetes\", \"GraphQL\"],\n          experience_level: \"senior\",\n          location: \"San Francisco, CA\",\n          years_experience: 6,\n          summary: \"Experienced full-stack developer with strong ML background\",\n          key_achievements: [\"Led development of ML recommendation system\", \"Reduced API response time by 40%\", \"Mentored 5 junior developers\"]\n        }, {\n          user_id: \"candidate_2\",\n          user_name: \"Sarah Chen\",\n          user_email: \"sarah.chen@email.com\",\n          resume_id: \"resume_2\",\n          match_score: 87.3,\n          matching_skills: [\"Python\", \"Django\", \"AWS\", \"Docker\", \"Redis\"],\n          missing_skills: [\"React\", \"Machine Learning\", \"Kubernetes\"],\n          experience_level: \"mid\",\n          location: \"Seattle, WA\",\n          years_experience: 4,\n          summary: \"Backend specialist with cloud infrastructure expertise\",\n          key_achievements: [\"Architected microservices platform\", \"Improved system reliability to 99.9%\", \"Led AWS migration project\"]\n        }, {\n          user_id: \"candidate_3\",\n          user_name: \"Michael Rodriguez\",\n          user_email: \"michael.rodriguez@email.com\",\n          resume_id: \"resume_3\",\n          match_score: 82.1,\n          matching_skills: [\"JavaScript\", \"React\", \"Node.js\", \"MongoDB\"],\n          missing_skills: [\"Python\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n          experience_level: \"mid\",\n          location: \"Austin, TX\",\n          years_experience: 3,\n          summary: \"Frontend-focused developer with full-stack capabilities\",\n          key_achievements: [\"Built responsive web applications\", \"Optimized frontend performance by 60%\", \"Implemented modern UI/UX designs\"]\n        }, {\n          user_id: \"candidate_4\",\n          user_name: \"Emily Park\",\n          user_email: \"emily.park@email.com\",\n          resume_id: \"resume_4\",\n          match_score: 79.8,\n          matching_skills: [\"Python\", \"Machine Learning\", \"TensorFlow\", \"SQL\"],\n          missing_skills: [\"React\", \"AWS\", \"Docker\", \"Kubernetes\"],\n          experience_level: \"entry\",\n          location: \"New York, NY\",\n          years_experience: 2,\n          summary: \"Data science background transitioning to software engineering\",\n          key_achievements: [\"Developed predictive models\", \"Published ML research paper\", \"Built data visualization dashboards\"]\n        }]\n      }\n    };\n  }\n  getMockJobRecommendations() {\n    return {\n      success: true,\n      data: {\n        total_recommendations: 8,\n        recommendations: [{\n          job: {\n            _id: \"job_1\",\n            title: \"Machine Learning Engineer\",\n            company_name: \"TechCorp\",\n            location: \"San Francisco, CA\",\n            salary_range: \"$130,000 - $180,000\"\n          },\n          match_score: 94.2,\n          matching_skills: [\"Python\", \"TensorFlow\", \"AWS\", \"Docker\"]\n        }, {\n          job: {\n            _id: \"job_2\",\n            title: \"Senior Backend Developer\",\n            company_name: \"StartupXYZ\",\n            location: \"Remote\",\n            salary_range: \"$120,000 - $160,000\"\n          },\n          match_score: 88.7,\n          matching_skills: [\"Python\", \"PostgreSQL\", \"Redis\", \"API Development\"]\n        }]\n      }\n    };\n  }\n  getMockSkillGapAnalysis() {\n    return {\n      success: true,\n      data: {\n        skill_coverage: 73.2,\n        gap_score: 26.8,\n        critical_gaps: 2,\n        matching_skills_count: 8,\n        missing_skills_count: 3,\n        matching_skills: [\"Python\", \"React\", \"SQL\", \"Git\", \"Agile\"],\n        missing_skills: [\"Kubernetes\", \"GraphQL\", \"Microservices\"],\n        recommendations: [\"Focus on learning Kubernetes for container orchestration\", \"Consider GraphQL for modern API development\", \"Gain experience with microservices architecture\"]\n      }\n    };\n  }\n  getMockJobInsights(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        application_trends: {\n          total_applications: 45,\n          applications_this_week: 12,\n          application_rate: \"2.1 per day\",\n          trending_up: true\n        },\n        candidate_quality: {\n          average_match_score: 76.3,\n          high_quality_candidates: 18,\n          candidates_above_80_percent: 12\n        },\n        skill_demand: {\n          most_common_skills: [\"Python\", \"React\", \"SQL\", \"AWS\"],\n          rare_skills: [\"Kubernetes\", \"GraphQL\", \"Rust\"],\n          skill_gap_frequency: {\n            \"Kubernetes\": 67,\n            \"Machine Learning\": 43,\n            \"GraphQL\": 38\n          }\n        },\n        recommendations: [\"Consider making Kubernetes optional to increase candidate pool\", \"High-quality candidates are actively applying\", \"Your salary range is competitive for this market\"]\n      }\n    };\n  }\n  getMockEmployerStats() {\n    return {\n      success: true,\n      data: {\n        total_jobs_posted: 8,\n        total_applications: 156,\n        average_match_score: 74.2,\n        successful_hires: 3,\n        time_to_hire: \"18 days\",\n        top_performing_jobs: [{\n          job_id: \"job_1\",\n          title: \"Senior Developer\",\n          applications: 23,\n          avg_match_score: 82.1\n        }, {\n          job_id: \"job_2\",\n          title: \"Product Manager\",\n          applications: 31,\n          avg_match_score: 79.8\n        }],\n        candidate_source_analysis: {\n          direct_applications: 45,\n          ai_recommendations: 32,\n          referrals: 18,\n          job_boards: 61\n        },\n        skill_trends: {\n          most_in_demand: [\"Python\", \"React\", \"AWS\", \"Machine Learning\"],\n          emerging_skills: [\"Rust\", \"GraphQL\", \"Kubernetes\", \"WebAssembly\"],\n          skill_gaps: [\"DevOps\", \"Cloud Architecture\", \"Data Engineering\"]\n        }\n      }\n    };\n  }\n\n  // ====== AI ANALYSIS ENDPOINTS ======\n\n  /**\n   * Perform skill gap analysis between candidate and job\n   * @param {string} candidateId - ID of the candidate\n   * @param {string} jobId - ID of the job\n   * @returns {Promise<Object>} Skill gap analysis results\n   */\n  async analyzeSkillGap(candidateId, jobId) {\n    try {\n      const response = await this.api.post(`/ai/skill-gap?candidate_id=${candidateId}&job_id=${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing skill gap:', error);\n\n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Skill gap analysis completed (demo mode)\",\n        data: {\n          candidate_id: candidateId,\n          job_id: jobId,\n          skill_coverage: 76.5,\n          matching_skills: ['JavaScript', 'React', 'Node.js', 'Git'],\n          missing_skills: ['AWS', 'Docker', 'Kubernetes', 'TypeScript'],\n          critical_gaps: 2,\n          recommendations: ['Consider learning AWS to better match this role', 'Docker and containerization skills would be valuable', 'Strong foundation in web development - highlight these skills'],\n          improvement_areas: ['Cloud Computing', 'DevOps', 'Modern JavaScript']\n        }\n      };\n    }\n  }\n\n  /**\n   * Get AI-powered insights about a candidate\n   * @param {string} candidateId - ID of the candidate\n   * @returns {Promise<Object>} Candidate insights and recommendations\n   */\n  async getCandidateInsights(candidateId) {\n    try {\n      const response = await this.api.get(`/ai/candidate-insights/${candidateId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting candidate insights:', error);\n\n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Candidate insights generated (demo mode)\",\n        data: {\n          candidate_id: candidateId,\n          profile_strength: {\n            overall_score: 82.5,\n            skills_diversity: 15,\n            experience_relevance: 78.0,\n            ats_compatibility: 85.2\n          },\n          market_fit: {\n            in_demand_skills: ['Python', 'React', 'JavaScript'],\n            emerging_skills: ['Kubernetes', 'GraphQL'],\n            skill_gaps: ['Machine Learning', 'DevOps', 'Cloud Architecture']\n          },\n          career_recommendations: ['Consider developing cloud computing skills', 'Your profile shows strong technical foundation', 'Focus on building a portfolio of projects'],\n          job_match_potential: {\n            best_fit_roles: ['Software Developer', 'Full Stack Engineer'],\n            salary_range_estimate: '$70,000 - $95,000',\n            location_opportunities: ['San Francisco', 'Seattle', 'Remote']\n          }\n        }\n      };\n    }\n  }\n\n  /**\n   * Get current job market trends and analytics\n   * @returns {Promise<Object>} Market trends data\n   */\n  async getMarketTrends() {\n    try {\n      const response = await this.api.get('/ai/market-trends');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting market trends:', error);\n\n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Market trends retrieved (demo mode)\",\n        data: {\n          skill_demand: {\n            most_in_demand: [{\n              skill: \"Python\",\n              demand_score: 95,\n              growth: \"+15%\"\n            }, {\n              skill: \"JavaScript\",\n              demand_score: 92,\n              growth: \"+12%\"\n            }, {\n              skill: \"React\",\n              demand_score: 88,\n              growth: \"+20%\"\n            }, {\n              skill: \"AWS\",\n              demand_score: 85,\n              growth: \"+25%\"\n            }, {\n              skill: \"Machine Learning\",\n              demand_score: 82,\n              growth: \"+30%\"\n            }],\n            emerging_skills: [{\n              skill: \"Rust\",\n              demand_score: 45,\n              growth: \"+150%\"\n            }, {\n              skill: \"GraphQL\",\n              demand_score: 52,\n              growth: \"+80%\"\n            }, {\n              skill: \"Kubernetes\",\n              demand_score: 68,\n              growth: \"+60%\"\n            }]\n          },\n          job_categories: {\n            highest_demand: [{\n              category: \"Software Engineering\",\n              openings: 15420,\n              growth: \"+18%\"\n            }, {\n              category: \"Data Science\",\n              openings: 8950,\n              growth: \"+35%\"\n            }, {\n              category: \"Product Management\",\n              openings: 6780,\n              growth: \"+22%\"\n            }]\n          },\n          salary_trends: {\n            software_engineer: {\n              entry_level: \"$75,000 - $95,000\",\n              mid_level: \"$95,000 - $130,000\",\n              senior_level: \"$130,000 - $180,000\",\n              trend: \"+8% YoY\"\n            },\n            data_scientist: {\n              entry_level: \"$85,000 - $110,000\",\n              mid_level: \"$110,000 - $150,000\",\n              senior_level: \"$150,000 - $200,000\",\n              trend: \"+12% YoY\"\n            }\n          },\n          remote_work: {\n            percentage_remote: 65,\n            hybrid_percentage: 25,\n            on_site_percentage: 10,\n            trend: \"Increasing remote opportunities\"\n          },\n          hiring_timeline: {\n            average_time_to_hire: \"21 days\",\n            interview_rounds: \"3-4 rounds\",\n            response_time: \"5-7 days\"\n          }\n        }\n      };\n    }\n  }\n\n  /**\n   * Get optimization suggestions for a job posting\n   * @param {string} jobId - ID of the job to optimize\n   * @returns {Promise<Object>} Job optimization suggestions\n   */\n  async optimizeJobPosting(jobId) {\n    try {\n      const response = await this.api.post(`/ai/optimize-job-posting?job_id=${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error optimizing job posting:', error);\n\n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Job optimization analysis completed (demo mode)\",\n        data: {\n          job_id: jobId,\n          current_performance: {\n            applications_received: 12,\n            average_match_score: 74.2,\n            time_since_posted: \"5 days\"\n          },\n          title_optimization: {\n            current_title: \"Software Developer\",\n            suggestions: [\"Consider adding seniority level for clarity\", \"Include key technology stack in title\", \"Keep title under 60 characters for better visibility\"],\n            optimized_examples: [\"Senior Software Developer - Python/React\", \"Software Developer (Remote) - TechCorp\"]\n          },\n          description_optimization: {\n            readability_score: 78,\n            suggestions: [\"Add bullet points for better readability\", \"Include company culture information\", \"Specify remote work options clearly\"]\n          },\n          requirements_optimization: {\n            total_requirements: 8,\n            suggestions: [\"Consider marking some skills as 'nice-to-have'\", \"Add years of experience for each technology\", \"Include soft skills requirements\"]\n          },\n          ats_optimization: {\n            ats_score: 85,\n            suggestions: [\"Good keyword usage for ATS systems\", \"Consider adding industry-specific terms\"]\n          }\n        }\n      };\n    }\n  }\n}\n\n// Export singleton instance\nconst aiMatchingAPI = new AIMatchingAPI();\nexport default aiMatchingAPI;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AIMatchingAPI","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","console","data","message","getCandidatesForJob","jobId","log","get","getMockCandidatesForJob","getJobRecommendationsForCandidate","candidateId","getMockJobRecommendations","analyzeSkillGap","post","candidate_id","job_id","getMockSkillGapAnalysis","uploadAndParseResume","resumeFile","formData","FormData","append","getJobInsights","getMockJobInsights","getEmployerMatchingStats","getMockEmployerStats","batchProcessCandidates","candidateIds","candidate_ids","success","job_title","total_candidates","average_match_score","candidates","user_id","user_name","user_email","resume_id","match_score","matching_skills","missing_skills","experience_level","location","years_experience","summary","key_achievements","total_recommendations","recommendations","job","_id","title","company_name","salary_range","skill_coverage","gap_score","critical_gaps","matching_skills_count","missing_skills_count","application_trends","total_applications","applications_this_week","application_rate","trending_up","candidate_quality","high_quality_candidates","candidates_above_80_percent","skill_demand","most_common_skills","rare_skills","skill_gap_frequency","total_jobs_posted","successful_hires","time_to_hire","top_performing_jobs","applications","avg_match_score","candidate_source_analysis","direct_applications","ai_recommendations","referrals","job_boards","skill_trends","most_in_demand","emerging_skills","skill_gaps","improvement_areas","getCandidateInsights","profile_strength","overall_score","skills_diversity","experience_relevance","ats_compatibility","market_fit","in_demand_skills","career_recommendations","job_match_potential","best_fit_roles","salary_range_estimate","location_opportunities","getMarketTrends","skill","demand_score","growth","job_categories","highest_demand","category","openings","salary_trends","software_engineer","entry_level","mid_level","senior_level","trend","data_scientist","remote_work","percentage_remote","hybrid_percentage","on_site_percentage","hiring_timeline","average_time_to_hire","interview_rounds","response_time","optimizeJobPosting","current_performance","applications_received","time_since_posted","title_optimization","current_title","suggestions","optimized_examples","description_optimization","readability_score","requirements_optimization","total_requirements","ats_optimization","ats_score","aiMatchingAPI"],"sources":["/Users/surajj/Desktop/JobPortal1/frontend/src/services/aiMatchingAPI.js"],"sourcesContent":["/**\n * AI Matching API Service\n * Handles communication with the Python backend for AI-powered job matching and candidate screening\n */\n\nimport axios from 'axios';\n\n// Backend API base URL (adjust based on your backend configuration)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nclass AIMatchingAPI {\n  constructor() {\n    this.api = axios.create({\n      baseURL: `${API_BASE_URL}/api`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Add request interceptor to include auth token\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Add response interceptor for error handling\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        console.error('API Error:', error.response?.data || error.message);\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   * Get AI-ranked candidates for a specific job\n   * @param {string} jobId - The job ID to get candidates for\n   * @returns {Promise<Object>} AI-ranked candidates with match scores\n   */\n  async getCandidatesForJob(jobId) {\n    try {\n      console.log(`Fetching AI-ranked candidates for job: ${jobId}`);\n      const response = await this.api.get(`/jobs/${jobId}/candidates`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching candidates for job:', error);\n      // Return mock data for development\n      return this.getMockCandidatesForJob(jobId);\n    }\n  }\n\n  /**\n   * Get job recommendations for a candidate\n   * @param {string} candidateId - The candidate ID\n   * @returns {Promise<Object>} AI-recommended jobs for the candidate\n   */\n  async getJobRecommendationsForCandidate(candidateId) {\n    try {\n      const response = await this.api.get(`/candidates/${candidateId}/job-recommendations`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job recommendations:', error);\n      return this.getMockJobRecommendations();\n    }\n  }\n\n  /**\n   * Analyze skill gaps for a candidate against job requirements\n   * @param {string} candidateId - The candidate ID\n   * @param {string} jobId - The job ID to analyze against\n   * @returns {Promise<Object>} Skill gap analysis\n   */\n  async analyzeSkillGap(candidateId, jobId) {\n    try {\n      const response = await this.api.post(`/analysis/skill-gap`, {\n        candidate_id: candidateId,\n        job_id: jobId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing skill gap:', error);\n      return this.getMockSkillGapAnalysis();\n    }\n  }\n\n  /**\n   * Upload and parse resume for AI analysis\n   * @param {File} resumeFile - The resume file to upload\n   * @returns {Promise<Object>} Parsed resume data with AI feedback\n   */\n  async uploadAndParseResume(resumeFile) {\n    try {\n      const formData = new FormData();\n      formData.append('resume_file', resumeFile);\n\n      const response = await this.api.post('/resumes/upload-and-parse', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading and parsing resume:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get AI insights for a job posting\n   * @param {string} jobId - The job ID\n   * @returns {Promise<Object>} AI insights and analytics for the job\n   */\n  async getJobInsights(jobId) {\n    try {\n      const response = await this.api.get(`/jobs/${jobId}/ai-insights`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching job insights:', error);\n      return this.getMockJobInsights(jobId);\n    }\n  }\n\n  /**\n   * Get overall matching statistics for an employer\n   * @returns {Promise<Object>} Matching statistics and insights\n   */\n  async getEmployerMatchingStats() {\n    try {\n      const response = await this.api.get('/employers/matching-stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employer matching stats:', error);\n      return this.getMockEmployerStats();\n    }\n  }\n\n  /**\n   * Batch process multiple resumes for a job\n   * @param {string} jobId - The job ID\n   * @param {Array<string>} candidateIds - Array of candidate IDs to process\n   * @returns {Promise<Object>} Batch processing results\n   */\n  async batchProcessCandidates(jobId, candidateIds) {\n    try {\n      const response = await this.api.post('/jobs/batch-process-candidates', {\n        job_id: jobId,\n        candidate_ids: candidateIds\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error batch processing candidates:', error);\n      throw error;\n    }\n  }\n\n  // Mock data methods for development/fallback\n  getMockCandidatesForJob(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        job_title: \"Senior Software Engineer\",\n        total_candidates: 12,\n        average_match_score: 78.5,\n        candidates: [\n          {\n            user_id: \"candidate_1\",\n            user_name: \"Alex Johnson\",\n            user_email: \"alex.johnson@email.com\",\n            resume_id: \"resume_1\",\n            match_score: 92.5,\n            matching_skills: [\"Python\", \"React\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n            missing_skills: [\"Kubernetes\", \"GraphQL\"],\n            experience_level: \"senior\",\n            location: \"San Francisco, CA\",\n            years_experience: 6,\n            summary: \"Experienced full-stack developer with strong ML background\",\n            key_achievements: [\n              \"Led development of ML recommendation system\",\n              \"Reduced API response time by 40%\",\n              \"Mentored 5 junior developers\"\n            ]\n          },\n          {\n            user_id: \"candidate_2\",\n            user_name: \"Sarah Chen\",\n            user_email: \"sarah.chen@email.com\",\n            resume_id: \"resume_2\",\n            match_score: 87.3,\n            matching_skills: [\"Python\", \"Django\", \"AWS\", \"Docker\", \"Redis\"],\n            missing_skills: [\"React\", \"Machine Learning\", \"Kubernetes\"],\n            experience_level: \"mid\",\n            location: \"Seattle, WA\",\n            years_experience: 4,\n            summary: \"Backend specialist with cloud infrastructure expertise\",\n            key_achievements: [\n              \"Architected microservices platform\",\n              \"Improved system reliability to 99.9%\",\n              \"Led AWS migration project\"\n            ]\n          },\n          {\n            user_id: \"candidate_3\",\n            user_name: \"Michael Rodriguez\",\n            user_email: \"michael.rodriguez@email.com\",\n            resume_id: \"resume_3\",\n            match_score: 82.1,\n            matching_skills: [\"JavaScript\", \"React\", \"Node.js\", \"MongoDB\"],\n            missing_skills: [\"Python\", \"AWS\", \"Machine Learning\", \"PostgreSQL\"],\n            experience_level: \"mid\",\n            location: \"Austin, TX\",\n            years_experience: 3,\n            summary: \"Frontend-focused developer with full-stack capabilities\",\n            key_achievements: [\n              \"Built responsive web applications\",\n              \"Optimized frontend performance by 60%\",\n              \"Implemented modern UI/UX designs\"\n            ]\n          },\n          {\n            user_id: \"candidate_4\",\n            user_name: \"Emily Park\",\n            user_email: \"emily.park@email.com\",\n            resume_id: \"resume_4\",\n            match_score: 79.8,\n            matching_skills: [\"Python\", \"Machine Learning\", \"TensorFlow\", \"SQL\"],\n            missing_skills: [\"React\", \"AWS\", \"Docker\", \"Kubernetes\"],\n            experience_level: \"entry\",\n            location: \"New York, NY\",\n            years_experience: 2,\n            summary: \"Data science background transitioning to software engineering\",\n            key_achievements: [\n              \"Developed predictive models\",\n              \"Published ML research paper\",\n              \"Built data visualization dashboards\"\n            ]\n          }\n        ]\n      }\n    };\n  }\n\n  getMockJobRecommendations() {\n    return {\n      success: true,\n      data: {\n        total_recommendations: 8,\n        recommendations: [\n          {\n            job: {\n              _id: \"job_1\",\n              title: \"Machine Learning Engineer\",\n              company_name: \"TechCorp\",\n              location: \"San Francisco, CA\",\n              salary_range: \"$130,000 - $180,000\"\n            },\n            match_score: 94.2,\n            matching_skills: [\"Python\", \"TensorFlow\", \"AWS\", \"Docker\"]\n          },\n          {\n            job: {\n              _id: \"job_2\",\n              title: \"Senior Backend Developer\",\n              company_name: \"StartupXYZ\",\n              location: \"Remote\",\n              salary_range: \"$120,000 - $160,000\"\n            },\n            match_score: 88.7,\n            matching_skills: [\"Python\", \"PostgreSQL\", \"Redis\", \"API Development\"]\n          }\n        ]\n      }\n    };\n  }\n\n  getMockSkillGapAnalysis() {\n    return {\n      success: true,\n      data: {\n        skill_coverage: 73.2,\n        gap_score: 26.8,\n        critical_gaps: 2,\n        matching_skills_count: 8,\n        missing_skills_count: 3,\n        matching_skills: [\"Python\", \"React\", \"SQL\", \"Git\", \"Agile\"],\n        missing_skills: [\"Kubernetes\", \"GraphQL\", \"Microservices\"],\n        recommendations: [\n          \"Focus on learning Kubernetes for container orchestration\",\n          \"Consider GraphQL for modern API development\",\n          \"Gain experience with microservices architecture\"\n        ]\n      }\n    };\n  }\n\n  getMockJobInsights(jobId) {\n    return {\n      success: true,\n      data: {\n        job_id: jobId,\n        application_trends: {\n          total_applications: 45,\n          applications_this_week: 12,\n          application_rate: \"2.1 per day\",\n          trending_up: true\n        },\n        candidate_quality: {\n          average_match_score: 76.3,\n          high_quality_candidates: 18,\n          candidates_above_80_percent: 12\n        },\n        skill_demand: {\n          most_common_skills: [\"Python\", \"React\", \"SQL\", \"AWS\"],\n          rare_skills: [\"Kubernetes\", \"GraphQL\", \"Rust\"],\n          skill_gap_frequency: {\n            \"Kubernetes\": 67,\n            \"Machine Learning\": 43,\n            \"GraphQL\": 38\n          }\n        },\n        recommendations: [\n          \"Consider making Kubernetes optional to increase candidate pool\",\n          \"High-quality candidates are actively applying\",\n          \"Your salary range is competitive for this market\"\n        ]\n      }\n    };\n  }\n\n  getMockEmployerStats() {\n    return {\n      success: true,\n      data: {\n        total_jobs_posted: 8,\n        total_applications: 156,\n        average_match_score: 74.2,\n        successful_hires: 3,\n        time_to_hire: \"18 days\",\n        top_performing_jobs: [\n          {\n            job_id: \"job_1\",\n            title: \"Senior Developer\",\n            applications: 23,\n            avg_match_score: 82.1\n          },\n          {\n            job_id: \"job_2\", \n            title: \"Product Manager\",\n            applications: 31,\n            avg_match_score: 79.8\n          }\n        ],\n        candidate_source_analysis: {\n          direct_applications: 45,\n          ai_recommendations: 32,\n          referrals: 18,\n          job_boards: 61\n        },\n        skill_trends: {\n          most_in_demand: [\"Python\", \"React\", \"AWS\", \"Machine Learning\"],\n          emerging_skills: [\"Rust\", \"GraphQL\", \"Kubernetes\", \"WebAssembly\"],\n          skill_gaps: [\"DevOps\", \"Cloud Architecture\", \"Data Engineering\"]\n        }\n      }\n    };\n  }\n\n  // ====== AI ANALYSIS ENDPOINTS ======\n  \n  /**\n   * Perform skill gap analysis between candidate and job\n   * @param {string} candidateId - ID of the candidate\n   * @param {string} jobId - ID of the job\n   * @returns {Promise<Object>} Skill gap analysis results\n   */\n  async analyzeSkillGap(candidateId, jobId) {\n    try {\n      const response = await this.api.post(`/ai/skill-gap?candidate_id=${candidateId}&job_id=${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing skill gap:', error);\n      \n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Skill gap analysis completed (demo mode)\",\n        data: {\n          candidate_id: candidateId,\n          job_id: jobId,\n          skill_coverage: 76.5,\n          matching_skills: ['JavaScript', 'React', 'Node.js', 'Git'],\n          missing_skills: ['AWS', 'Docker', 'Kubernetes', 'TypeScript'],\n          critical_gaps: 2,\n          recommendations: [\n            'Consider learning AWS to better match this role',\n            'Docker and containerization skills would be valuable',\n            'Strong foundation in web development - highlight these skills'\n          ],\n          improvement_areas: ['Cloud Computing', 'DevOps', 'Modern JavaScript']\n        }\n      };\n    }\n  }\n\n  /**\n   * Get AI-powered insights about a candidate\n   * @param {string} candidateId - ID of the candidate\n   * @returns {Promise<Object>} Candidate insights and recommendations\n   */\n  async getCandidateInsights(candidateId) {\n    try {\n      const response = await this.api.get(`/ai/candidate-insights/${candidateId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting candidate insights:', error);\n      \n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Candidate insights generated (demo mode)\",\n        data: {\n          candidate_id: candidateId,\n          profile_strength: {\n            overall_score: 82.5,\n            skills_diversity: 15,\n            experience_relevance: 78.0,\n            ats_compatibility: 85.2\n          },\n          market_fit: {\n            in_demand_skills: ['Python', 'React', 'JavaScript'],\n            emerging_skills: ['Kubernetes', 'GraphQL'],\n            skill_gaps: ['Machine Learning', 'DevOps', 'Cloud Architecture']\n          },\n          career_recommendations: [\n            'Consider developing cloud computing skills',\n            'Your profile shows strong technical foundation',\n            'Focus on building a portfolio of projects'\n          ],\n          job_match_potential: {\n            best_fit_roles: ['Software Developer', 'Full Stack Engineer'],\n            salary_range_estimate: '$70,000 - $95,000',\n            location_opportunities: ['San Francisco', 'Seattle', 'Remote']\n          }\n        }\n      };\n    }\n  }\n\n  /**\n   * Get current job market trends and analytics\n   * @returns {Promise<Object>} Market trends data\n   */\n  async getMarketTrends() {\n    try {\n      const response = await this.api.get('/ai/market-trends');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting market trends:', error);\n      \n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Market trends retrieved (demo mode)\",\n        data: {\n          skill_demand: {\n            most_in_demand: [\n              { skill: \"Python\", demand_score: 95, growth: \"+15%\" },\n              { skill: \"JavaScript\", demand_score: 92, growth: \"+12%\" },\n              { skill: \"React\", demand_score: 88, growth: \"+20%\" },\n              { skill: \"AWS\", demand_score: 85, growth: \"+25%\" },\n              { skill: \"Machine Learning\", demand_score: 82, growth: \"+30%\" }\n            ],\n            emerging_skills: [\n              { skill: \"Rust\", demand_score: 45, growth: \"+150%\" },\n              { skill: \"GraphQL\", demand_score: 52, growth: \"+80%\" },\n              { skill: \"Kubernetes\", demand_score: 68, growth: \"+60%\" }\n            ]\n          },\n          job_categories: {\n            highest_demand: [\n              { category: \"Software Engineering\", openings: 15420, growth: \"+18%\" },\n              { category: \"Data Science\", openings: 8950, growth: \"+35%\" },\n              { category: \"Product Management\", openings: 6780, growth: \"+22%\" }\n            ]\n          },\n          salary_trends: {\n            software_engineer: {\n              entry_level: \"$75,000 - $95,000\",\n              mid_level: \"$95,000 - $130,000\",\n              senior_level: \"$130,000 - $180,000\",\n              trend: \"+8% YoY\"\n            },\n            data_scientist: {\n              entry_level: \"$85,000 - $110,000\",\n              mid_level: \"$110,000 - $150,000\",\n              senior_level: \"$150,000 - $200,000\",\n              trend: \"+12% YoY\"\n            }\n          },\n          remote_work: {\n            percentage_remote: 65,\n            hybrid_percentage: 25,\n            on_site_percentage: 10,\n            trend: \"Increasing remote opportunities\"\n          },\n          hiring_timeline: {\n            average_time_to_hire: \"21 days\",\n            interview_rounds: \"3-4 rounds\",\n            response_time: \"5-7 days\"\n          }\n        }\n      };\n    }\n  }\n\n  /**\n   * Get optimization suggestions for a job posting\n   * @param {string} jobId - ID of the job to optimize\n   * @returns {Promise<Object>} Job optimization suggestions\n   */\n  async optimizeJobPosting(jobId) {\n    try {\n      const response = await this.api.post(`/ai/optimize-job-posting?job_id=${jobId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error optimizing job posting:', error);\n      \n      // Mock fallback data\n      return {\n        success: true,\n        message: \"Job optimization analysis completed (demo mode)\",\n        data: {\n          job_id: jobId,\n          current_performance: {\n            applications_received: 12,\n            average_match_score: 74.2,\n            time_since_posted: \"5 days\"\n          },\n          title_optimization: {\n            current_title: \"Software Developer\",\n            suggestions: [\n              \"Consider adding seniority level for clarity\",\n              \"Include key technology stack in title\",\n              \"Keep title under 60 characters for better visibility\"\n            ],\n            optimized_examples: [\n              \"Senior Software Developer - Python/React\",\n              \"Software Developer (Remote) - TechCorp\"\n            ]\n          },\n          description_optimization: {\n            readability_score: 78,\n            suggestions: [\n              \"Add bullet points for better readability\",\n              \"Include company culture information\",\n              \"Specify remote work options clearly\"\n            ]\n          },\n          requirements_optimization: {\n            total_requirements: 8,\n            suggestions: [\n              \"Consider marking some skills as 'nice-to-have'\",\n              \"Add years of experience for each technology\",\n              \"Include soft skills requirements\"\n            ]\n          },\n          ats_optimization: {\n            ats_score: 85,\n            suggestions: [\n              \"Good keyword usage for ATS systems\",\n              \"Consider adding industry-specific terms\"\n            ]\n          }\n        }\n      };\n    }\n  }\n}\n\n// Export singleton instance\nconst aiMatchingAPI = new AIMatchingAPI();\nexport default aiMatchingAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}