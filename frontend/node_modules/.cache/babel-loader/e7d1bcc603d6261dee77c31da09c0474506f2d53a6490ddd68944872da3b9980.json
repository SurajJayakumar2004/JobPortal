{"ast":null,"code":"// Resume Analysis Service\nclass ResumeAnalyzer{constructor(){// Common technical skills that might appear in resumes\nthis.skillsDatabase=[// Programming Languages\n'JavaScript','Python','Java','C++','C#','PHP','Ruby','Go','Rust','TypeScript','Swift','Kotlin','Scala','R','MATLAB','Perl','Objective-C','Dart','F#','Haskell',// Web Technologies\n'HTML','CSS','React','Angular','Vue.js','Node.js','Express.js','jQuery','Bootstrap','Sass','Less','Webpack','Babel','Redux','GraphQL','REST API','JSON','XML',// Databases\n'MySQL','PostgreSQL','MongoDB','SQLite','Redis','Cassandra','DynamoDB','Oracle','SQL Server','MariaDB','Firebase','Elasticsearch','Neo4j',// Cloud & DevOps\n'AWS','Azure','Google Cloud','Docker','Kubernetes','Jenkins','Git','GitHub','GitLab','CI/CD','Terraform','Ansible','Chef','Puppet','Nginx','Apache',// Data Science & AI\n'Machine Learning','Deep Learning','TensorFlow','PyTorch','Pandas','NumPy','Scikit-learn','Jupyter','Data Analysis','Statistics','Big Data','Hadoop','Spark',// Mobile Development\n'React Native','Flutter','Xamarin','Ionic','Cordova','Android','iOS',// Design & UX\n'Figma','Sketch','Adobe XD','Photoshop','Illustrator','InVision','Principle','UI/UX Design','User Research','Wireframing','Prototyping',// Testing\n'Jest','Mocha','Cypress','Selenium','JUnit','PyTest','Testing',// Project Management\n'Agile','Scrum','Kanban','Jira','Trello','Asana','Confluence',// Soft Skills\n'Leadership','Communication','Teamwork','Problem Solving','Critical Thinking','Project Management','Time Management','Adaptability','Creativity'];}// Extract text from file (simplified version)\nasync extractTextFromFile(file){return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=event=>{const text=event.target.result;resolve(text);};reader.onerror=error=>{reject(error);};// For now, only handle text files and basic text extraction\nif(file.type==='text/plain'){reader.readAsText(file);}else{// For PDF/DOC files, we'd need additional libraries\n// For demo purposes, we'll return a placeholder\nresolve('Sample resume text with JavaScript React Node.js Python Machine Learning');}});}// Extract skills from resume text\nextractSkills(resumeText){if(!resumeText||typeof resumeText!=='string'){return[];}const foundSkills=new Set();const normalizedText=resumeText.toLowerCase();// Look for skills in the text\nthis.skillsDatabase.forEach(skill=>{const normalizedSkill=skill.toLowerCase();// Check for exact matches and common variations\nconst patterns=[normalizedSkill,normalizedSkill.replace(/\\./g,''),// Remove dots (e.g., Node.js -> nodejs)\nnormalizedSkill.replace(/\\s+/g,''),// Remove spaces\nnormalizedSkill.replace(/-/g,'')// Remove hyphens\n];patterns.forEach(pattern=>{if(normalizedText.includes(pattern)){foundSkills.add(skill);}});});return Array.from(foundSkills);}// Analyze resume and return skills with confidence scores\nasync analyzeResume(file){try{const resumeText=await this.extractTextFromFile(file);const extractedSkills=this.extractSkills(resumeText);// Calculate confidence scores based on context\nconst skillsWithConfidence=extractedSkills.map(skill=>({skill,confidence:this.calculateConfidence(skill,resumeText)}));// Sort by confidence\nskillsWithConfidence.sort((a,b)=>b.confidence-a.confidence);return{success:true,skills:skillsWithConfidence.map(s=>s.skill),skillsWithConfidence,totalSkillsFound:extractedSkills.length,resumeText:resumeText.substring(0,500)+'...'// First 500 chars for preview\n};}catch(error){console.error('Resume analysis error:',error);return{success:false,error:'Failed to analyze resume. Please try again.',skills:[]};}}// Calculate confidence score for a skill based on context\ncalculateConfidence(skill,text){const normalizedText=text.toLowerCase();const normalizedSkill=skill.toLowerCase();let confidence=0.5;// Base confidence\n// Increase confidence if skill appears in typical resume sections\nconst resumeSections=['skills','technical skills','technologies','programming languages','tools','frameworks','experience','projects'];resumeSections.forEach(section=>{const sectionRegex=new RegExp(`${section}[^\\\\n]*${normalizedSkill}`,'i');if(sectionRegex.test(normalizedText)){confidence+=0.3;}});// Increase confidence if skill appears multiple times\nconst occurrences=(normalizedText.match(new RegExp(normalizedSkill,'g'))||[]).length;confidence+=Math.min(occurrences*0.1,0.3);// Increase confidence if skill appears near project/work descriptions\nconst contextWords=['developed','built','created','implemented','used','worked with'];contextWords.forEach(word=>{const contextRegex=new RegExp(`${word}[^.]{0,50}${normalizedSkill}`,'i');if(contextRegex.test(normalizedText)){confidence+=0.2;}});return Math.min(confidence,1.0);}// Get skill suggestions based on found skills\ngetSkillSuggestions(foundSkills){const suggestions=new Map();// Skill relationships and suggestions\nconst skillRelationships={'JavaScript':['React','Node.js','TypeScript','Vue.js','Angular'],'Python':['Django','Flask','Pandas','NumPy','Machine Learning'],'React':['Redux','Next.js','GraphQL','TypeScript'],'Node.js':['Express.js','MongoDB','REST API'],'Machine Learning':['TensorFlow','PyTorch','Scikit-learn','Python'],'AWS':['Docker','Kubernetes','Terraform','CI/CD'],'Docker':['Kubernetes','AWS','DevOps','CI/CD']};foundSkills.forEach(skill=>{if(skillRelationships[skill]){skillRelationships[skill].forEach(relatedSkill=>{if(!foundSkills.includes(relatedSkill)){suggestions.set(relatedSkill,(suggestions.get(relatedSkill)||0)+1);}});}});// Sort suggestions by frequency\nreturn Array.from(suggestions.entries()).sort((a,b)=>b[1]-a[1]).slice(0,10).map(_ref=>{let[skill]=_ref;return skill;});}}// Create and export singleton instance\nconst resumeAnalyzer=new ResumeAnalyzer();export default resumeAnalyzer;","map":{"version":3,"names":["ResumeAnalyzer","constructor","skillsDatabase","extractTextFromFile","file","Promise","resolve","reject","reader","FileReader","onload","event","text","target","result","onerror","error","type","readAsText","extractSkills","resumeText","foundSkills","Set","normalizedText","toLowerCase","forEach","skill","normalizedSkill","patterns","replace","pattern","includes","add","Array","from","analyzeResume","extractedSkills","skillsWithConfidence","map","confidence","calculateConfidence","sort","a","b","success","skills","s","totalSkillsFound","length","substring","console","resumeSections","section","sectionRegex","RegExp","test","occurrences","match","Math","min","contextWords","word","contextRegex","getSkillSuggestions","suggestions","Map","skillRelationships","relatedSkill","set","get","entries","slice","_ref","resumeAnalyzer"],"sources":["/Users/surajj/Desktop/JobPortal1/frontend/src/services/resumeAnalyzer.js"],"sourcesContent":["// Resume Analysis Service\nclass ResumeAnalyzer {\n  constructor() {\n    // Common technical skills that might appear in resumes\n    this.skillsDatabase = [\n      // Programming Languages\n      'JavaScript', 'Python', 'Java', 'C++', 'C#', 'PHP', 'Ruby', 'Go', 'Rust', 'TypeScript',\n      'Swift', 'Kotlin', 'Scala', 'R', 'MATLAB', 'Perl', 'Objective-C', 'Dart', 'F#', 'Haskell',\n      \n      // Web Technologies\n      'HTML', 'CSS', 'React', 'Angular', 'Vue.js', 'Node.js', 'Express.js', 'jQuery', 'Bootstrap',\n      'Sass', 'Less', 'Webpack', 'Babel', 'Redux', 'GraphQL', 'REST API', 'JSON', 'XML',\n      \n      // Databases\n      'MySQL', 'PostgreSQL', 'MongoDB', 'SQLite', 'Redis', 'Cassandra', 'DynamoDB', 'Oracle',\n      'SQL Server', 'MariaDB', 'Firebase', 'Elasticsearch', 'Neo4j',\n      \n      // Cloud & DevOps\n      'AWS', 'Azure', 'Google Cloud', 'Docker', 'Kubernetes', 'Jenkins', 'Git', 'GitHub',\n      'GitLab', 'CI/CD', 'Terraform', 'Ansible', 'Chef', 'Puppet', 'Nginx', 'Apache',\n      \n      // Data Science & AI\n      'Machine Learning', 'Deep Learning', 'TensorFlow', 'PyTorch', 'Pandas', 'NumPy',\n      'Scikit-learn', 'Jupyter', 'Data Analysis', 'Statistics', 'Big Data', 'Hadoop', 'Spark',\n      \n      // Mobile Development\n      'React Native', 'Flutter', 'Xamarin', 'Ionic', 'Cordova', 'Android', 'iOS',\n      \n      // Design & UX\n      'Figma', 'Sketch', 'Adobe XD', 'Photoshop', 'Illustrator', 'InVision', 'Principle',\n      'UI/UX Design', 'User Research', 'Wireframing', 'Prototyping',\n      \n      // Testing\n      'Jest', 'Mocha', 'Cypress', 'Selenium', 'JUnit', 'PyTest', 'Testing',\n      \n      // Project Management\n      'Agile', 'Scrum', 'Kanban', 'Jira', 'Trello', 'Asana', 'Confluence',\n      \n      // Soft Skills\n      'Leadership', 'Communication', 'Teamwork', 'Problem Solving', 'Critical Thinking',\n      'Project Management', 'Time Management', 'Adaptability', 'Creativity'\n    ];\n  }\n\n  // Extract text from file (simplified version)\n  async extractTextFromFile(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      \n      reader.onload = (event) => {\n        const text = event.target.result;\n        resolve(text);\n      };\n      \n      reader.onerror = (error) => {\n        reject(error);\n      };\n\n      // For now, only handle text files and basic text extraction\n      if (file.type === 'text/plain') {\n        reader.readAsText(file);\n      } else {\n        // For PDF/DOC files, we'd need additional libraries\n        // For demo purposes, we'll return a placeholder\n        resolve('Sample resume text with JavaScript React Node.js Python Machine Learning');\n      }\n    });\n  }\n\n  // Extract skills from resume text\n  extractSkills(resumeText) {\n    if (!resumeText || typeof resumeText !== 'string') {\n      return [];\n    }\n\n    const foundSkills = new Set();\n    const normalizedText = resumeText.toLowerCase();\n\n    // Look for skills in the text\n    this.skillsDatabase.forEach(skill => {\n      const normalizedSkill = skill.toLowerCase();\n      \n      // Check for exact matches and common variations\n      const patterns = [\n        normalizedSkill,\n        normalizedSkill.replace(/\\./g, ''), // Remove dots (e.g., Node.js -> nodejs)\n        normalizedSkill.replace(/\\s+/g, ''), // Remove spaces\n        normalizedSkill.replace(/-/g, ''), // Remove hyphens\n      ];\n\n      patterns.forEach(pattern => {\n        if (normalizedText.includes(pattern)) {\n          foundSkills.add(skill);\n        }\n      });\n    });\n\n    return Array.from(foundSkills);\n  }\n\n  // Analyze resume and return skills with confidence scores\n  async analyzeResume(file) {\n    try {\n      const resumeText = await this.extractTextFromFile(file);\n      const extractedSkills = this.extractSkills(resumeText);\n      \n      // Calculate confidence scores based on context\n      const skillsWithConfidence = extractedSkills.map(skill => ({\n        skill,\n        confidence: this.calculateConfidence(skill, resumeText)\n      }));\n\n      // Sort by confidence\n      skillsWithConfidence.sort((a, b) => b.confidence - a.confidence);\n\n      return {\n        success: true,\n        skills: skillsWithConfidence.map(s => s.skill),\n        skillsWithConfidence,\n        totalSkillsFound: extractedSkills.length,\n        resumeText: resumeText.substring(0, 500) + '...' // First 500 chars for preview\n      };\n    } catch (error) {\n      console.error('Resume analysis error:', error);\n      return {\n        success: false,\n        error: 'Failed to analyze resume. Please try again.',\n        skills: []\n      };\n    }\n  }\n\n  // Calculate confidence score for a skill based on context\n  calculateConfidence(skill, text) {\n    const normalizedText = text.toLowerCase();\n    const normalizedSkill = skill.toLowerCase();\n    \n    let confidence = 0.5; // Base confidence\n    \n    // Increase confidence if skill appears in typical resume sections\n    const resumeSections = [\n      'skills', 'technical skills', 'technologies', 'programming languages',\n      'tools', 'frameworks', 'experience', 'projects'\n    ];\n    \n    resumeSections.forEach(section => {\n      const sectionRegex = new RegExp(`${section}[^\\\\n]*${normalizedSkill}`, 'i');\n      if (sectionRegex.test(normalizedText)) {\n        confidence += 0.3;\n      }\n    });\n\n    // Increase confidence if skill appears multiple times\n    const occurrences = (normalizedText.match(new RegExp(normalizedSkill, 'g')) || []).length;\n    confidence += Math.min(occurrences * 0.1, 0.3);\n\n    // Increase confidence if skill appears near project/work descriptions\n    const contextWords = ['developed', 'built', 'created', 'implemented', 'used', 'worked with'];\n    contextWords.forEach(word => {\n      const contextRegex = new RegExp(`${word}[^.]{0,50}${normalizedSkill}`, 'i');\n      if (contextRegex.test(normalizedText)) {\n        confidence += 0.2;\n      }\n    });\n\n    return Math.min(confidence, 1.0);\n  }\n\n  // Get skill suggestions based on found skills\n  getSkillSuggestions(foundSkills) {\n    const suggestions = new Map();\n    \n    // Skill relationships and suggestions\n    const skillRelationships = {\n      'JavaScript': ['React', 'Node.js', 'TypeScript', 'Vue.js', 'Angular'],\n      'Python': ['Django', 'Flask', 'Pandas', 'NumPy', 'Machine Learning'],\n      'React': ['Redux', 'Next.js', 'GraphQL', 'TypeScript'],\n      'Node.js': ['Express.js', 'MongoDB', 'REST API'],\n      'Machine Learning': ['TensorFlow', 'PyTorch', 'Scikit-learn', 'Python'],\n      'AWS': ['Docker', 'Kubernetes', 'Terraform', 'CI/CD'],\n      'Docker': ['Kubernetes', 'AWS', 'DevOps', 'CI/CD'],\n    };\n\n    foundSkills.forEach(skill => {\n      if (skillRelationships[skill]) {\n        skillRelationships[skill].forEach(relatedSkill => {\n          if (!foundSkills.includes(relatedSkill)) {\n            suggestions.set(relatedSkill, (suggestions.get(relatedSkill) || 0) + 1);\n          }\n        });\n      }\n    });\n\n    // Sort suggestions by frequency\n    return Array.from(suggestions.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10)\n      .map(([skill]) => skill);\n  }\n}\n\n// Create and export singleton instance\nconst resumeAnalyzer = new ResumeAnalyzer();\nexport default resumeAnalyzer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}