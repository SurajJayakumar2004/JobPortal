{"ast":null,"code":"/**\n * API service layer for communicating with the FastAPI backend.\n * Contains configured axios instance and all API call functions.\n */\n\nimport axios from 'axios';\nimport { logError, retryApiCall } from '../utils/errorHandler';\n\n// Configure axios instance with base URL\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 30000,\n  // Increased timeout for file uploads\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add authentication token to requests\napi.interceptors.request.use(config => {\n  var _config$method;\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url, 'Token:', token ? 'Present' : 'None');\n  return config;\n}, error => {\n  logError(error, 'API Request Interceptor');\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle authentication errors and retries\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2, _error$response3;\n  const originalRequest = error.config;\n  logError(error, 'API Response', {\n    url: originalRequest === null || originalRequest === void 0 ? void 0 : originalRequest.url,\n    method: originalRequest === null || originalRequest === void 0 ? void 0 : originalRequest.method,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status\n  });\n\n  // Handle authentication errors\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n\n    // Clear auth data\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Redirect to login only if not already on auth pages\n    const currentPath = window.location.pathname;\n    if (currentPath !== '/login' && currentPath !== '/register') {\n      window.location.href = '/login';\n    }\n  }\n\n  // Handle rate limiting with exponential backoff\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 429 && !originalRequest._retryCount) {\n    originalRequest._retryCount = 0;\n    const retryAfter = error.response.headers['retry-after'] || 1;\n    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n    originalRequest._retryCount++;\n    if (originalRequest._retryCount < 3) {\n      return api(originalRequest);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth API calls\nexport const authAPI = {\n  /**\n   * Register a new user\n   * @param {Object} userData - User registration data\n   * @param {string} userData.email - User email\n   * @param {string} userData.password - User password\n   * @param {string} userData.role - User role (student/employer)\n   */\n  register: userData => api.post('/auth/register', userData),\n  /**\n   * Login user with email and password\n   * @param {Object} credentials - Login credentials\n   * @param {string} credentials.username - User email (username)\n   * @param {string} credentials.password - User password\n   */\n  login: credentials => {\n    return api.post('/auth/login', {\n      email: credentials.username,\n      // Backend expects 'email' field\n      password: credentials.password\n    });\n  }\n};\n\n// User API calls\nexport const userAPI = {\n  /**\n   * Get current user profile data\n   * Requires authentication token\n   */\n  getProfile: () => api.get('/auth/me')\n};\n\n// Resume API calls\nexport const resumeAPI = {\n  /**\n   * Upload resume file for AI parsing and analysis\n   * @param {File} file - Resume file (.pdf or .docx)\n   */\n  uploadResume: file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/resumes/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  /**\n   * Get AI feedback for a specific resume\n   * @param {string} resumeId - Resume ID\n   */\n  getFeedback: resumeId => api.get(`/resumes/${resumeId}/feedback`)\n};\n\n// Jobs API calls\nexport const jobsAPI = {\n  /**\n   * Get all available jobs (public endpoint)\n   * @param {Object} params - Query parameters for filtering\n   */\n  getJobs: (params = {}) => api.get('/jobs', {\n    params\n  }),\n  /**\n   * Get specific job details by ID\n   * @param {string} jobId - Job ID\n   */\n  getJobById: jobId => api.get(`/jobs/${jobId}`),\n  /**\n   * Create a new job posting (employer only)\n   * @param {Object} jobData - Job posting data\n   */\n  createJob: jobData => api.post('/jobs', jobData),\n  /**\n   * Get candidates for a specific job (employer only)\n   * @param {string} jobId - Job ID\n   */\n  getJobCandidates: jobId => api.get(`/jobs/${jobId}/candidates`)\n};\n\n// Export the configured axios instance as default\nexport default api;","map":{"version":3,"names":["axios","logError","retryApiCall","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","token","localStorage","getItem","Authorization","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","_error$response2","_error$response3","originalRequest","status","_retry","removeItem","currentPath","window","location","pathname","href","_retryCount","retryAfter","resolve","setTimeout","authAPI","register","userData","post","login","credentials","email","username","password","userAPI","getProfile","get","resumeAPI","uploadResume","file","formData","FormData","append","getFeedback","resumeId","jobsAPI","getJobs","params","getJobById","jobId","createJob","jobData","getJobCandidates"],"sources":["/Users/surajj/Desktop/JobPortal/frontend/src/services/api.js"],"sourcesContent":["/**\n * API service layer for communicating with the FastAPI backend.\n * Contains configured axios instance and all API call functions.\n */\n\nimport axios from 'axios';\nimport { logError, retryApiCall } from '../utils/errorHandler';\n\n// Configure axios instance with base URL\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 30000, // Increased timeout for file uploads\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add authentication token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    console.log('API Request:', config.method?.toUpperCase(), config.url, 'Token:', token ? 'Present' : 'None');\n    return config;\n  },\n  (error) => {\n    logError(error, 'API Request Interceptor');\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle authentication errors and retries\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    logError(error, 'API Response', {\n      url: originalRequest?.url,\n      method: originalRequest?.method,\n      status: error.response?.status\n    });\n    \n    // Handle authentication errors\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      \n      // Clear auth data\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      \n      // Redirect to login only if not already on auth pages\n      const currentPath = window.location.pathname;\n      if (currentPath !== '/login' && currentPath !== '/register') {\n        window.location.href = '/login';\n      }\n    }\n    \n    // Handle rate limiting with exponential backoff\n    if (error.response?.status === 429 && !originalRequest._retryCount) {\n      originalRequest._retryCount = 0;\n      \n      const retryAfter = error.response.headers['retry-after'] || 1;\n      await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));\n      \n      originalRequest._retryCount++;\n      if (originalRequest._retryCount < 3) {\n        return api(originalRequest);\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Auth API calls\nexport const authAPI = {\n  /**\n   * Register a new user\n   * @param {Object} userData - User registration data\n   * @param {string} userData.email - User email\n   * @param {string} userData.password - User password\n   * @param {string} userData.role - User role (student/employer)\n   */\n  register: (userData) => api.post('/auth/register', userData),\n\n  /**\n   * Login user with email and password\n   * @param {Object} credentials - Login credentials\n   * @param {string} credentials.username - User email (username)\n   * @param {string} credentials.password - User password\n   */\n  login: (credentials) => {\n    return api.post('/auth/login', {\n      email: credentials.username, // Backend expects 'email' field\n      password: credentials.password\n    });\n  },\n};\n\n// User API calls\nexport const userAPI = {\n  /**\n   * Get current user profile data\n   * Requires authentication token\n   */\n  getProfile: () => api.get('/auth/me'),\n};\n\n// Resume API calls\nexport const resumeAPI = {\n  /**\n   * Upload resume file for AI parsing and analysis\n   * @param {File} file - Resume file (.pdf or .docx)\n   */\n  uploadResume: (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return api.post('/resumes/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n\n  /**\n   * Get AI feedback for a specific resume\n   * @param {string} resumeId - Resume ID\n   */\n  getFeedback: (resumeId) => api.get(`/resumes/${resumeId}/feedback`),\n};\n\n// Jobs API calls\nexport const jobsAPI = {\n  /**\n   * Get all available jobs (public endpoint)\n   * @param {Object} params - Query parameters for filtering\n   */\n  getJobs: (params = {}) => api.get('/jobs', { params }),\n\n  /**\n   * Get specific job details by ID\n   * @param {string} jobId - Job ID\n   */\n  getJobById: (jobId) => api.get(`/jobs/${jobId}`),\n\n  /**\n   * Create a new job posting (employer only)\n   * @param {Object} jobData - Job posting data\n   */\n  createJob: (jobData) => api.post('/jobs', jobData),\n\n  /**\n   * Get candidates for a specific job (employer only)\n   * @param {string} jobId - Job ID\n   */\n  getJobCandidates: (jobId) => api.get(`/jobs/${jobId}/candidates`),\n};\n\n// Export the configured axios instance as default\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}