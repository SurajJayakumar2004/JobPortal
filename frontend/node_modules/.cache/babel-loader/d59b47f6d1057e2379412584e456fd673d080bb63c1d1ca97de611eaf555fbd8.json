{"ast":null,"code":"/**\n * API service layer for communicating with the FastAPI backend.\n * Contains configured axios instance and all API call functions.\n */\n\nimport axios from 'axios';\n\n// Configure axios instance with base URL\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add authentication token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor to handle authentication errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API calls\nexport const authAPI = {\n  /**\n   * Register a new user\n   * @param {Object} userData - User registration data\n   * @param {string} userData.email - User email\n   * @param {string} userData.password - User password\n   * @param {string} userData.role - User role (student/employer)\n   */\n  register: userData => api.post('/auth/register', userData),\n  /**\n   * Login user with email and password\n   * @param {Object} credentials - Login credentials\n   * @param {string} credentials.username - User email (username)\n   * @param {string} credentials.password - User password\n   */\n  login: credentials => {\n    return api.post('/auth/login', {\n      email: credentials.username,\n      // Backend expects 'email' field\n      password: credentials.password\n    });\n  }\n};\n\n// User API calls\nexport const userAPI = {\n  /**\n   * Get current user profile data\n   * Requires authentication token\n   */\n  getProfile: () => api.get('/users/me')\n};\n\n// Resume API calls\nexport const resumeAPI = {\n  /**\n   * Upload resume file for AI parsing and analysis\n   * @param {File} file - Resume file (.pdf or .docx)\n   */\n  uploadResume: file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post('/resumes/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  /**\n   * Get AI feedback for a specific resume\n   * @param {string} resumeId - Resume ID\n   */\n  getFeedback: resumeId => api.get(`/resumes/${resumeId}/feedback`)\n};\n\n// Jobs API calls\nexport const jobsAPI = {\n  /**\n   * Get all available jobs (public endpoint)\n   * @param {Object} params - Query parameters for filtering\n   */\n  getJobs: (params = {}) => api.get('/jobs', {\n    params\n  }),\n  /**\n   * Get specific job details by ID\n   * @param {string} jobId - Job ID\n   */\n  getJobById: jobId => api.get(`/jobs/${jobId}`),\n  /**\n   * Create a new job posting (employer only)\n   * @param {Object} jobData - Job posting data\n   */\n  createJob: jobData => api.post('/jobs', jobData),\n  /**\n   * Get candidates for a specific job (employer only)\n   * @param {string} jobId - Job ID\n   */\n  getJobCandidates: jobId => api.get(`/jobs/${jobId}/candidates`)\n};\n\n// Export the configured axios instance as default\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","login","credentials","email","username","password","userAPI","getProfile","get","resumeAPI","uploadResume","file","formData","FormData","append","getFeedback","resumeId","jobsAPI","getJobs","params","getJobById","jobId","createJob","jobData","getJobCandidates"],"sources":["/Users/surajj/Desktop/JobPortal/frontend/src/services/api.js"],"sourcesContent":["/**\n * API service layer for communicating with the FastAPI backend.\n * Contains configured axios instance and all API call functions.\n */\n\nimport axios from 'axios';\n\n// Configure axios instance with base URL\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add authentication token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Response interceptor to handle authentication errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API calls\nexport const authAPI = {\n  /**\n   * Register a new user\n   * @param {Object} userData - User registration data\n   * @param {string} userData.email - User email\n   * @param {string} userData.password - User password\n   * @param {string} userData.role - User role (student/employer)\n   */\n  register: (userData) => api.post('/auth/register', userData),\n\n  /**\n   * Login user with email and password\n   * @param {Object} credentials - Login credentials\n   * @param {string} credentials.username - User email (username)\n   * @param {string} credentials.password - User password\n   */\n  login: (credentials) => {\n    return api.post('/auth/login', {\n      email: credentials.username, // Backend expects 'email' field\n      password: credentials.password\n    });\n  },\n};\n\n// User API calls\nexport const userAPI = {\n  /**\n   * Get current user profile data\n   * Requires authentication token\n   */\n  getProfile: () => api.get('/users/me'),\n};\n\n// Resume API calls\nexport const resumeAPI = {\n  /**\n   * Upload resume file for AI parsing and analysis\n   * @param {File} file - Resume file (.pdf or .docx)\n   */\n  uploadResume: (file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return api.post('/resumes/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n\n  /**\n   * Get AI feedback for a specific resume\n   * @param {string} resumeId - Resume ID\n   */\n  getFeedback: (resumeId) => api.get(`/resumes/${resumeId}/feedback`),\n};\n\n// Jobs API calls\nexport const jobsAPI = {\n  /**\n   * Get all available jobs (public endpoint)\n   * @param {Object} params - Query parameters for filtering\n   */\n  getJobs: (params = {}) => api.get('/jobs', { params }),\n\n  /**\n   * Get specific job details by ID\n   * @param {string} jobId - Job ID\n   */\n  getJobById: (jobId) => api.get(`/jobs/${jobId}`),\n\n  /**\n   * Create a new job posting (employer only)\n   * @param {Object} jobData - Job posting data\n   */\n  createJob: (jobData) => api.post('/jobs', jobData),\n\n  /**\n   * Get candidates for a specific job (employer only)\n   * @param {string} jobId - Job ID\n   */\n  getJobCandidates: (jobId) => api.get(`/jobs/${jobId}/candidates`),\n};\n\n// Export the configured axios instance as default\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}