{"ast":null,"code":"/**\n * Authentication context for managing user authentication state\n * throughout the application.\n */import React,{createContext,useContext,useState,useEffect}from'react';import{userAPI}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[isAuthenticated,setIsAuthenticated]=useState(false);// Check if user is authenticated on app load\nuseEffect(()=>{const token=localStorage.getItem('token');if(token){// Verify token and get user profile\nfetchUserProfile();}else{setLoading(false);}},[]);/**\n   * Fetch user profile data from API\n   */const fetchUserProfile=async()=>{try{var _data$user;const response=await userAPI.getProfile();const{data}=response.data;// Backend wraps response in { success: true, data: {...} }\nsetUser(data.user);setIsAuthenticated(true);// Check if we need to redirect employer on app load\nif(((_data$user=data.user)===null||_data$user===void 0?void 0:_data$user.role)==='employer'&&window.location.pathname==='/'){window.location.href='/employer';}}catch(error){console.error('Failed to fetch user profile:',error);localStorage.removeItem('token');setIsAuthenticated(false);}finally{setLoading(false);}};/**\n   * Login user and store authentication token\n   * @param {string} token - JWT token from login response\n   * @param {Object} userData - User data from login response\n   */const login=(token,userData)=>{localStorage.setItem('token',token);setUser(userData);setIsAuthenticated(true);};/**\n   * Check if user should be redirected based on their role\n   * @param {Object} userData - User data\n   * @returns {string} - Redirect path based on user role\n   */const getDefaultRedirectPath=userData=>{if((userData===null||userData===void 0?void 0:userData.role)==='employer'){return'/employer';}return'/dashboard';};/**\n   * Logout user and clear authentication data\n   */const logout=()=>{localStorage.removeItem('token');setUser(null);setIsAuthenticated(false);};const value={user,loading,isAuthenticated,login,logout,fetchUserProfile,getDefaultRedirectPath};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","userAPI","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","fetchUserProfile","_data$user","response","getProfile","data","role","window","location","pathname","href","error","console","removeItem","login","userData","setItem","getDefaultRedirectPath","logout","value","Provider"],"sources":["/Users/surajj/Desktop/JobPortal1/frontend/src/contexts/AuthContext.js"],"sourcesContent":["/**\n * Authentication context for managing user authentication state\n * throughout the application.\n */\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { userAPI } from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Verify token and get user profile\n      fetchUserProfile();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Fetch user profile data from API\n   */\n  const fetchUserProfile = async () => {\n    try {\n      const response = await userAPI.getProfile();\n      const { data } = response.data; // Backend wraps response in { success: true, data: {...} }\n      setUser(data.user);\n      setIsAuthenticated(true);\n      \n      // Check if we need to redirect employer on app load\n      if (data.user?.role === 'employer' && window.location.pathname === '/') {\n        window.location.href = '/employer';\n      }\n    } catch (error) {\n      console.error('Failed to fetch user profile:', error);\n      localStorage.removeItem('token');\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Login user and store authentication token\n   * @param {string} token - JWT token from login response\n   * @param {Object} userData - User data from login response\n   */\n  const login = (token, userData) => {\n    localStorage.setItem('token', token);\n    setUser(userData);\n    setIsAuthenticated(true);\n  };\n\n  /**\n   * Check if user should be redirected based on their role\n   * @param {Object} userData - User data\n   * @returns {string} - Redirect path based on user role\n   */\n  const getDefaultRedirectPath = (userData) => {\n    if (userData?.role === 'employer') {\n      return '/employer';\n    }\n    return '/dashboard';\n  };\n\n  /**\n   * Logout user and clear authentication data\n   */\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    logout,\n    fetchUserProfile,\n    getDefaultRedirectPath,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}